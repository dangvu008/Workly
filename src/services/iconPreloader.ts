/**
 * ‚úÖ Icon Preloader Service - Kh·∫Øc ph·ª•c l·ªói load icon ch·∫≠m
 * ƒê·∫£m b·∫£o icons ƒë∆∞·ª£c load tr∆∞·ªõc khi app hi·ªÉn th·ªã
 */

import * as Font from 'expo-font';
import * as SplashScreen from 'expo-splash-screen';
import { MaterialCommunityIcons } from '@expo/vector-icons';

export class IconPreloaderService {
  private static instance: IconPreloaderService;
  private isPreloaded = false;
  private preloadPromise: Promise<void> | null = null;

  static getInstance(): IconPreloaderService {
    if (!IconPreloaderService.instance) {
      IconPreloaderService.instance = new IconPreloaderService();
    }
    return IconPreloaderService.instance;
  }

  /**
   * ‚úÖ Preload icon fonts tr∆∞·ªõc khi app start
   */
  async preloadIcons(): Promise<void> {
    if (this.isPreloaded) {
      return;
    }

    if (this.preloadPromise) {
      return this.preloadPromise;
    }

    this.preloadPromise = this._performPreload();
    return this.preloadPromise;
  }

  private async _performPreload(): Promise<void> {
    try {
      console.log('üé® IconPreloader: B·∫Øt ƒë·∫ßu preload icons...');
      const startTime = Date.now();

      // Gi·ªØ splash screen hi·ªÉn th·ªã trong khi preload
      await SplashScreen.preventAutoHideAsync();

      // Preload MaterialCommunityIcons font
      await this.preloadMaterialCommunityIcons();

      // Cache critical icons
      await this.cacheCriticalIcons();

      const endTime = Date.now();
      console.log(`‚úÖ IconPreloader: Ho√†n th√†nh trong ${endTime - startTime}ms`);

      this.isPreloaded = true;

      // ·∫®n splash screen sau khi preload xong
      await SplashScreen.hideAsync();

    } catch (error) {
      console.error('‚ùå IconPreloader: L·ªói preload:', error);
      // V·∫´n ·∫©n splash screen n·∫øu c√≥ l·ªói
      await SplashScreen.hideAsync();
    }
  }

  /**
   * ‚úÖ Preload MaterialCommunityIcons font
   */
  private async preloadMaterialCommunityIcons(): Promise<void> {
    try {
      // Ki·ªÉm tra font ƒë√£ s·∫µn s√†ng
      const testIcon = MaterialCommunityIcons.glyphMap['home'];
      if (testIcon) {
        console.log('‚úÖ IconPreloader: MaterialCommunityIcons s·∫µn s√†ng');
      }

      // Force load font n·∫øu c·∫ßn
      await Font.loadAsync({
        ...MaterialCommunityIcons.font,
      });

    } catch (error) {
      console.warn('‚ö†Ô∏è IconPreloader: L·ªói load MaterialCommunityIcons:', error);
    }
  }

  /**
   * ‚úÖ Cache c√°c icons quan tr·ªçng
   */
  private async cacheCriticalIcons(): Promise<void> {
    try {
      // Danh s√°ch icons quan tr·ªçng c·∫ßn preload
      const criticalIcons = [
        'home', 'home-outline',
        'clock', 'clock-outline', 
        'note-text', 'note-text-outline',
        'chart-line', 'chart-line-variant',
        'cog', 'cog-outline',
        'play', 'pause', 'stop',
        'check', 'close',
        'plus', 'minus',
        'menu', 'dots-vertical',
        'weather-sunny', 'weather-cloudy'
      ];

      // Pre-render icons ƒë·ªÉ cache ch√∫ng
      criticalIcons.forEach(iconName => {
        if (MaterialCommunityIcons.glyphMap[iconName]) {
          // Icon exists, it's now cached
        }
      });

      console.log(`‚úÖ IconPreloader: ƒê√£ cache ${criticalIcons.length} icons quan tr·ªçng`);
    } catch (error) {
      console.warn('‚ö†Ô∏è IconPreloader: L·ªói cache icons:', error);
    }
  }

  /**
   * ‚úÖ Ki·ªÉm tra tr·∫°ng th√°i preload
   */
  isIconsPreloaded(): boolean {
    return this.isPreloaded;
  }

  /**
   * ‚úÖ Get preload status
   */
  getPreloadStatus(): {
    isPreloaded: boolean;
    isPreloading: boolean;
  } {
    return {
      isPreloaded: this.isPreloaded,
      isPreloading: this.preloadPromise !== null && !this.isPreloaded,
    };
  }
}

// Export singleton instance
export const iconPreloader = IconPreloaderService.getInstance();

/**
 * ‚úÖ Utility function ƒë·ªÉ preload icons trong App.tsx
 */
export const initializeIconPreloader = async (): Promise<void> => {
  try {
    await iconPreloader.preloadIcons();
  } catch (error) {
    console.error('‚ùå L·ªói kh·ªüi t·∫°o icon preloader:', error);
  }
};
