/**
 * ReminderSync Service - Qu·∫£n l√Ω logic "just-in-time" cho th√¥ng b√°o
 * 
 * Logic chu·∫©n:
 * - Ch·ªâ l√™n l·ªãch cho l·∫ßn nh·∫Øc nh·ªü ti·∫øp theo c·ªßa m·ªói lo·∫°i
 * - T·ª± ƒë·ªông re-sync sau khi trigger ho·∫∑c user action
 * - ƒê·∫£m b·∫£o kh√¥ng c√≥ th√¥ng b√°o tr√πng l·∫∑p
 */

import { Shift } from '../types';
import { storageService } from './storage';
import { notificationService } from './notifications';
import { alarmService } from './alarmService';
import { timeSyncService } from './timeSync';
import { addMinutes, subMinutes, isAfter, isBefore, startOfDay, addDays, format } from 'date-fns';

interface NextReminder {
  type: 'departure' | 'checkin' | 'checkout';
  date: Date;
  triggerTime: Date;
  shiftId: string;
  shiftName: string;
}

class ReminderSyncService {
  private isInitialized = false;
  private currentActiveShift: Shift | null = null;

  async initialize(): Promise<void> {
    if (this.isInitialized) return;
    
    console.log('üîÑ ReminderSync: Initializing...');
    this.isInitialized = true;
  }

  /**
   * ‚úÖ H√ÄM TRUNG T√ÇM: ƒê·ªìng b·ªô v√† l√™n l·ªãch cho c√°c nh·∫Øc nh·ªü ti·∫øp theo
   * ƒê√¢y l√† h√†m duy nh·∫•t ch·ªãu tr√°ch nhi·ªám qu·∫£n l√Ω t·∫•t c·∫£ logic l√™n l·ªãch
   */
  async syncNextReminders(activeShift?: Shift): Promise<void> {
    try {
      await this.initialize();

      const now = new Date();
      console.log('üîÑ ReminderSync: Starting sync next reminders...');
      console.log(`‚è∞ Current time: ${now.toLocaleString('vi-VN')}`);
      console.log(`üìÖ Current day: ${['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'][now.getDay()]}`);

      // Debug: Hi·ªÉn th·ªã th√¥ng tin v·ªÅ vi·ªác √°p d·ª•ng ca m·ªõi
      if (activeShift) {
        console.log(`üè¢ Applying new shift: ${activeShift.name}`);
        console.log(`üìã Shift schedule: ${activeShift.departureTime} ‚Üí ${activeShift.startTime} ‚Üí ${activeShift.officeEndTime}`);
        console.log(`üìÖ Work days: ${activeShift.workDays.map(d => ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'][d]).join(', ')}`);
      }

      // L·∫•y active shift n·∫øu kh√¥ng ƒë∆∞·ª£c truy·ªÅn v√†o
      if (!activeShift) {
        const activeShiftId = await storageService.getActiveShiftId();
        if (!activeShiftId) {
          console.log('‚ÑπÔ∏è ReminderSync: No active shift, skipping sync');
          return;
        }
        
        const shifts = await storageService.getShiftList();
        activeShift = shifts.find(s => s.id === activeShiftId) || undefined;
        
        if (!activeShift) {
          console.log('‚ö†Ô∏è ReminderSync: Active shift not found, skipping sync');
          return;
        }
      }

      this.currentActiveShift = activeShift;
      console.log(`üîÑ ReminderSync: Syncing reminders for shift: ${activeShift.name}`);

      // B∆Ø·ªöC A: D·ªåN D·∫∏P - H·ªßy t·∫•t c·∫£ th√¥ng b√°o ca l√†m vi·ªác c≈©
      await this.cleanupOldReminders();

      // B∆Ø·ªöC B: T√åM V√Ä L√äN L·ªäCH "CHU·∫®N B·ªä ƒêI L√ÄM" TI·∫æP THEO
      const nextDeparture = await this.findNextDepartureReminder(activeShift);
      if (nextDeparture) {
        await this.scheduleReminder(nextDeparture);
      }

      // B∆Ø·ªöC C: T√åM V√Ä L√äN L·ªäCH "CH·∫§M C√îNG V√ÄO" TI·∫æP THEO  
      const nextCheckin = await this.findNextCheckinReminder(activeShift);
      if (nextCheckin) {
        await this.scheduleReminder(nextCheckin);
      }

      // B∆Ø·ªöC D: T√åM V√Ä L√äN L·ªäCH "CH·∫§M C√îNG RA" TI·∫æP THEO
      const nextCheckout = await this.findNextCheckoutReminder(activeShift);
      if (nextCheckout) {
        await this.scheduleReminder(nextCheckout);
      }

      console.log('‚úÖ ReminderSync: Sync completed successfully');
    } catch (error) {
      console.error('‚ùå ReminderSync: Error syncing reminders:', error);
      throw error;
    }
  }

  /**
   * B∆Ø·ªöC 1: D·ªçn d·∫πp t·∫•t c·∫£ th√¥ng b√°o ca l√†m vi·ªác c≈©
   * H·ªßy b·ªè to√†n b·ªô l·ªãch tr√¨nh c≈© theo pattern ID ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ th√¥ng b√°o "m·ªì c√¥i" n√†o t·ªìn t·∫°i
   */
  private async cleanupOldReminders(): Promise<void> {
    console.log('üßπ ReminderSync: Cleaning up old reminders...');

    try {
      // H·ªßy t·∫•t c·∫£ notifications theo pattern ID
      console.log('üì± ReminderSync: Cancelling all shift notifications by pattern...');
      await this.cancelNotificationsByPattern(['departure-', 'checkin-', 'checkout-']);

      // H·ªßy t·∫•t c·∫£ alarms theo pattern ID
      console.log('üîî ReminderSync: Cancelling all shift alarms by pattern...');
      await this.cancelAlarmsByPattern(['departure-', 'checkin-', 'checkout-']);

      console.log('‚úÖ ReminderSync: Cleanup completed successfully');
    } catch (error) {
      console.error('‚ùå ReminderSync: Error during cleanup:', error);
      throw error;
    }
  }

  /**
   * H·ªßy notifications theo pattern ID
   */
  private async cancelNotificationsByPattern(patterns: string[]): Promise<void> {
    try {
      // S·ª≠ d·ª•ng method m·ªõi trong notificationService ƒë·ªÉ h·ªßy theo pattern
      for (const pattern of patterns) {
        await notificationService.cancelNotificationsByPattern(pattern);
      }
    } catch (error) {
      console.error('‚ùå ReminderSync: Error cancelling notifications by pattern:', error);
      // Fallback: s·ª≠ d·ª•ng method c≈©
      await notificationService.cancelAllShiftReminders();
    }
  }

  /**
   * H·ªßy alarms theo pattern ID
   */
  private async cancelAlarmsByPattern(patterns: string[]): Promise<void> {
    try {
      // S·ª≠ d·ª•ng method m·ªõi trong alarmService ƒë·ªÉ h·ªßy theo pattern
      for (const pattern of patterns) {
        await alarmService.cancelAlarmsByPattern(pattern);
      }
    } catch (error) {
      console.error('‚ùå ReminderSync: Error cancelling alarms by pattern:', error);
      // Fallback: s·ª≠ d·ª•ng method c≈©
      await alarmService.cancelShiftReminders();
    }
  }

  /**
   * B∆Ø·ªöC B: T√¨m v√† l√™n l·ªãch "CHU·∫®N B·ªä ƒêI L√ÄM" ti·∫øp theo
   */
  private async findNextDepartureReminder(shift: Shift): Promise<NextReminder | null> {
    const now = new Date();
    const today = startOfDay(now);

    console.log(`üîç ReminderSync: Finding next departure reminder for shift: ${shift.name}`);

    // ‚úÖ LOGIC CHU·∫®N: T√¨m ki·∫øm trong 14 ng√†y t·ªõi, b·∫Øt ƒë·∫ßu t·ª´ h√¥m nay
    for (let i = 0; i < 14; i++) {
      const targetDate = addDays(today, i);
      const dayOfWeek = targetDate.getDay();

      // Ki·ªÉm tra c√≥ ph·∫£i ng√†y l√†m vi·ªác kh√¥ng
      if (!shift.workDays.includes(dayOfWeek)) {
        console.log(`‚è≠Ô∏è ReminderSync: Skipping ${format(targetDate, 'dd/MM/yyyy')} - not a work day`);
        continue;
      }

      // ‚úÖ B√ÅOTH·ª®C TH·ª∞C S·ª∞: Departure reminder trigger 30 ph√∫t tr∆∞·ªõc departure time
      // Gi·ªëng nh∆∞ b√°o th·ª©c ƒëi·ªán tho·∫°i - nh·∫Øc nh·ªü tr∆∞·ªõc khi c·∫ßn h√†nh ƒë·ªông
      const [depHour, depMin] = shift.departureTime.split(':').map(Number);
      const triggerTime = new Date(targetDate);
      triggerTime.setHours(depHour, depMin - 30, 0, 0); // 30 ph√∫t tr∆∞·ªõc departure

      // ‚úÖ KH√îNG C·∫¶N ƒëi·ªÅu ch·ªânh ng√†y cho departure time
      // Departure time lu√¥n di·ªÖn ra trong c√πng ng√†y v·ªõi targetDate

      // ‚úÖ LOGIC CHU·∫®N: Ki·ªÉm tra th·ªùi gian - PH·∫¢I L√Ä T∆Ø∆†NG LAI
      const timeDiff = triggerTime.getTime() - now.getTime();
      const maxFutureTime = 7 * 24 * 60 * 60 * 1000; // 7 ng√†y

      console.log(`üîç ReminderSync: Departure check for ${format(targetDate, 'dd/MM/yyyy')}`);
      console.log(`   ‚è∞ Trigger: ${triggerTime.toLocaleString('vi-VN')}`);
      console.log(`   üïê Now: ${now.toLocaleString('vi-VN')}`);
      console.log(`   üìä Diff: ${Math.round(timeDiff / 1000 / 60)} minutes`);

      if (triggerTime <= now) {
        console.log(`   ‚è≠Ô∏è SKIPPED: Already passed - will check next day`);
        continue;
      }

      if (timeDiff > maxFutureTime) {
        console.log(`   ‚è≠Ô∏è SKIPPED: Too far in future (${Math.round(timeDiff / 1000 / 60 / 60 / 24)} days)`);
        continue;
      }

      // Ki·ªÉm tra user ƒë√£ th·ª±c hi·ªán action "ƒëi l√†m" ch∆∞a
      const dateString = format(targetDate, 'yyyy-MM-dd');
      const dayLogs = await storageService.getAttendanceLogsForDate(dateString);
      const hasGoWork = dayLogs.some(log => log.type === 'go_work');

      if (hasGoWork) {
        console.log(`   ‚è≠Ô∏è SKIPPED: User already went to work on ${dateString}`);
        continue;
      }

      // ‚úÖ FOUND: T√¨m th·∫•y reminder ti·∫øp theo h·ª£p l·ªá
      console.log(`   ‚úÖ FOUND: Next departure reminder for ${dateString} at ${triggerTime.toLocaleTimeString('vi-VN')}`);
      return {
        type: 'departure',
        date: targetDate,
        triggerTime,
        shiftId: shift.id,
        shiftName: shift.name
      };
    }

    console.log('‚ÑπÔ∏è ReminderSync: No next departure reminder found in 14 days');
    return null;
  }

  /**
   * B∆Ø·ªöC C: T√¨m v√† l√™n l·ªãch "CH·∫§M C√îNG V√ÄO" ti·∫øp theo
   */
  private async findNextCheckinReminder(shift: Shift): Promise<NextReminder | null> {
    const now = new Date();
    const today = startOfDay(now);

    for (let i = 0; i < 14; i++) {
      const targetDate = addDays(today, i);
      const dayOfWeek = targetDate.getDay();

      if (!shift.workDays.includes(dayOfWeek)) {
        continue;
      }

      // ‚úÖ B√ÅOTH·ª®C TH·ª∞C S·ª∞: Checkin reminder v·ªõi buffer time th√¥ng minh
      // S·ª≠ d·ª•ng remindBeforeStart t·ª´ shift settings (th∆∞·ªùng l√† 5-10 ph√∫t)
      const [startHour, startMin] = shift.startTime.split(':').map(Number);
      const triggerTime = new Date(targetDate);
      const bufferMinutes = Math.max(5, shift.remindBeforeStart || 5); // T·ªëi thi·ªÉu 5 ph√∫t
      triggerTime.setHours(startHour, startMin - bufferMinutes, 0, 0);

      // ‚úÖ KH√îNG C·∫¶N ƒëi·ªÅu ch·ªânh ng√†y cho start time
      // Start time lu√¥n di·ªÖn ra trong c√πng ng√†y v·ªõi targetDate

      // ‚úÖ B√ÅOTH·ª®C TH·ª∞C S·ª∞: Ki·ªÉm tra th·ªùi gian h·ª£p l√Ω
      const timeDiff = triggerTime.getTime() - now.getTime();
      const maxFutureTime = 7 * 24 * 60 * 60 * 1000; // 7 ng√†y

      console.log(`üîç ReminderSync: Checkin check - Now: ${now.toLocaleString()}, Trigger: ${triggerTime.toLocaleString()}, Diff: ${Math.round(timeDiff / 1000 / 60)} minutes`);

      if (triggerTime <= now) {
        console.log(`‚è≠Ô∏è ReminderSync: Skipping checkin reminder - already passed (${triggerTime.toLocaleString()})`);
        continue;
      }

      if (timeDiff > maxFutureTime) {
        console.log(`‚è≠Ô∏è ReminderSync: Skipping checkin reminder - too far in future (${Math.round(timeDiff / 1000 / 60 / 60 / 24)} days)`);
        continue;
      }

      // Ki·ªÉm tra user ƒë√£ check-in ch∆∞a
      const dateString = format(targetDate, 'yyyy-MM-dd');
      const dayLogs = await storageService.getAttendanceLogsForDate(dateString);
      const hasCheckIn = dayLogs.some(log => log.type === 'check_in');

      if (hasCheckIn) {
        continue;
      }

      return {
        type: 'checkin',
        date: targetDate,
        triggerTime,
        shiftId: shift.id,
        shiftName: shift.name
      };
    }

    console.log('‚ÑπÔ∏è ReminderSync: No next checkin reminder found');
    return null;
  }

  /**
   * B∆Ø·ªöC D: T√¨m v√† l√™n l·ªãch "CH·∫§M C√îNG RA" ti·∫øp theo
   */
  private async findNextCheckoutReminder(shift: Shift): Promise<NextReminder | null> {
    const now = new Date();
    const today = startOfDay(now);

    for (let i = 0; i < 14; i++) {
      const targetDate = addDays(today, i);
      const dayOfWeek = targetDate.getDay();

      if (!shift.workDays.includes(dayOfWeek)) {
        continue;
      }

      // ‚úÖ B√ÅOTH·ª®C TH·ª∞C S·ª∞: Checkout reminder v·ªõi buffer time h·ª£p l√Ω
      // S·ª≠ d·ª•ng remindAfterEnd t·ª´ shift settings (th∆∞·ªùng l√† 5-15 ph√∫t sau end time)
      const [endHour, endMin] = shift.officeEndTime.split(':').map(Number);
      const triggerTime = new Date(targetDate);
      const bufferMinutes = Math.max(5, shift.remindAfterEnd || 10); // T·ªëi thi·ªÉu 5 ph√∫t, m·∫∑c ƒë·ªãnh 10 ph√∫t
      triggerTime.setHours(endHour, endMin + bufferMinutes, 0, 0);

      // X·ª≠ l√Ω ca ƒë√™m
      if (shift.isNightShift && endHour < 12) {
        triggerTime.setDate(triggerTime.getDate() + 1);
      }

      // ‚úÖ B√ÅOTH·ª®C TH·ª∞C S·ª∞: Ki·ªÉm tra th·ªùi gian h·ª£p l√Ω
      const timeDiff = triggerTime.getTime() - now.getTime();
      const maxFutureTime = 7 * 24 * 60 * 60 * 1000; // 7 ng√†y

      console.log(`üîç ReminderSync: Checkout check - Now: ${now.toLocaleString()}, Trigger: ${triggerTime.toLocaleString()}, Diff: ${Math.round(timeDiff / 1000 / 60)} minutes`);

      if (triggerTime <= now) {
        console.log(`‚è≠Ô∏è ReminderSync: Skipping checkout reminder - already passed (${triggerTime.toLocaleString()})`);
        continue;
      }

      if (timeDiff > maxFutureTime) {
        console.log(`‚è≠Ô∏è ReminderSync: Skipping checkout reminder - too far in future (${Math.round(timeDiff / 1000 / 60 / 60 / 24)} days)`);
        continue;
      }

      // Ki·ªÉm tra user ƒë√£ check-out ch∆∞a
      const dateString = format(targetDate, 'yyyy-MM-dd');
      const dayLogs = await storageService.getAttendanceLogsForDate(dateString);
      const hasCheckOut = dayLogs.some(log => log.type === 'check_out');

      if (hasCheckOut) {
        continue;
      }

      return {
        type: 'checkout',
        date: targetDate,
        triggerTime,
        shiftId: shift.id,
        shiftName: shift.name
      };
    }

    console.log('‚ÑπÔ∏è ReminderSync: No next checkout reminder found');
    return null;
  }

  /**
   * L√™n l·ªãch m·ªôt reminder c·ª• th·ªÉ v·ªõi ID c√≥ quy t·∫Øc
   * ID format: type-YYYYMMDD (v√≠ d·ª•: departure-20250623, checkin-20250623, checkout-20250623)
   */
  private async scheduleReminder(reminder: NextReminder): Promise<void> {
    const dateString = format(reminder.date, 'yyyy-MM-dd');
    const dateId = format(reminder.date, 'yyyyMMdd'); // Format cho ID: 20250623
    const identifier = `${reminder.type}-${dateId}`; // departure-20250623

    console.log(`üìÖ ReminderSync: Scheduling ${reminder.type} reminder for ${dateString} at ${reminder.triggerTime.toLocaleTimeString()}`);
    console.log(`üÜî ReminderSync: Using identifier: ${identifier}`);

    // L√™n l·ªãch cho c·∫£ NotificationService v√† AlarmService
    await Promise.all([
      this.scheduleNotification(reminder, identifier),
      this.scheduleAlarm(reminder, identifier)
    ]);
  }

  /**
   * L√™n l·ªãch notification v·ªõi ID c√≥ quy t·∫Øc
   */
  private async scheduleNotification(reminder: NextReminder, identifier: string): Promise<void> {
    try {
      if (!this.currentActiveShift) {
        console.log('‚ö†Ô∏è ReminderSync: No active shift for notification scheduling');
        return;
      }

      // S·ª≠ d·ª•ng method m·ªõi v·ªõi ID c√≥ quy t·∫Øc
      await notificationService.scheduleReminderWithId(
        identifier,
        reminder.type,
        this.currentActiveShift,
        reminder.triggerTime,
        format(reminder.date, 'yyyy-MM-dd')
      );

      console.log(`üì± ReminderSync: Scheduled notification ${identifier}`);
    } catch (error) {
      console.error(`‚ùå ReminderSync: Error scheduling notification ${identifier}:`, error);
      // Fallback: s·ª≠ d·ª•ng method c≈© v·ªõi ki·ªÉm tra th·ªùi gian b·ªï sung
      try {
        // ‚úÖ SAFETY CHECK: Ki·ªÉm tra l·∫°i th·ªùi gian tr∆∞·ªõc khi fallback
        const now = new Date();
        if (reminder.triggerTime <= now) {
          console.log(`‚è≠Ô∏è ReminderSync: SKIPPED fallback notification for ${reminder.type} - trigger time is in the past`);
          return;
        }

        // ‚úÖ SAFETY CHECK: ƒê·∫£m b·∫£o c√≥ active shift
        if (!this.currentActiveShift) {
          console.log(`‚è≠Ô∏è ReminderSync: SKIPPED fallback notification for ${reminder.type} - no active shift`);
          return;
        }

        await notificationService.scheduleSpecificReminder(
          reminder.type,
          this.currentActiveShift,
          reminder.triggerTime,
          format(reminder.date, 'yyyy-MM-dd')
        );
        console.log(`üì± ReminderSync: Fallback scheduled notification for ${reminder.type}`);
      } catch (fallbackError) {
        console.error(`‚ùå ReminderSync: Fallback notification scheduling failed:`, fallbackError);
      }
    }
  }

  /**
   * L√™n l·ªãch alarm v·ªõi ID c√≥ quy t·∫Øc
   */
  private async scheduleAlarm(reminder: NextReminder, identifier: string): Promise<void> {
    try {
      if (!this.currentActiveShift) {
        console.log('‚ö†Ô∏è ReminderSync: No active shift for alarm scheduling');
        return;
      }

      // S·ª≠ d·ª•ng method m·ªõi v·ªõi ID c√≥ quy t·∫Øc
      await alarmService.scheduleAlarmWithId(
        identifier,
        reminder.type,
        this.currentActiveShift,
        reminder.triggerTime,
        format(reminder.date, 'yyyy-MM-dd')
      );

      console.log(`üîî ReminderSync: Scheduled alarm ${identifier}`);
    } catch (error) {
      console.error(`‚ùå ReminderSync: Error scheduling alarm ${identifier}:`, error);
      // Fallback: s·ª≠ d·ª•ng method c≈© v·ªõi ki·ªÉm tra th·ªùi gian b·ªï sung
      try {
        // ‚úÖ SAFETY CHECK: Ki·ªÉm tra l·∫°i th·ªùi gian tr∆∞·ªõc khi fallback
        const now = new Date();
        if (reminder.triggerTime <= now) {
          console.log(`‚è≠Ô∏è ReminderSync: SKIPPED fallback alarm for ${reminder.type} - trigger time is in the past`);
          return;
        }

        // ‚úÖ SAFETY CHECK: ƒê·∫£m b·∫£o c√≥ active shift
        if (!this.currentActiveShift) {
          console.log(`‚è≠Ô∏è ReminderSync: SKIPPED fallback alarm for ${reminder.type} - no active shift`);
          return;
        }

        await alarmService.scheduleSpecificAlarm(
          reminder.type,
          this.currentActiveShift,
          reminder.triggerTime,
          format(reminder.date, 'yyyy-MM-dd')
        );
        console.log(`üîî ReminderSync: Fallback scheduled alarm for ${reminder.type}`);
      } catch (fallbackError) {
        console.error(`‚ùå ReminderSync: Fallback alarm scheduling failed:`, fallbackError);
      }
    }
  }

  /**
   * ‚úÖ B√ÅOTH·ª®C TH·ª∞C S·ª∞: Ki·ªÉm tra th·ªùi gian ph√π h·ª£p cho reminder c·ª• th·ªÉ
   * S·ª≠ d·ª•ng logic ki·ªÉm tra th·ªùi gian ch√≠nh x√°c nh∆∞ b√°o th·ª©c tr√™n ƒëi·ªán tho·∫°i
   */
  async isAppropriateTimeForSpecificReminder(
    reminderType: 'departure' | 'checkin' | 'checkout',
    shiftId: string,
    targetDate?: Date
  ): Promise<boolean> {
    try {
      const shifts = await storageService.getShiftList();
      const shift = shifts.find((s: Shift) => s.id === shiftId);

      if (!shift) {
        console.log(`‚ö†Ô∏è ReminderSync: Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác ${shiftId}`);
        return false;
      }

      // S·ª≠ d·ª•ng logic ki·ªÉm tra th·ªùi gian c·ª• th·ªÉ cho t·ª´ng lo·∫°i reminder
      const { timeSyncService } = await import('./timeSync');
      const isAppropriate = timeSyncService.isAppropriateTimeForSpecificReminder(
        shift,
        reminderType,
        targetDate
      );

      console.log(`‚è∞ ReminderSync: ${reminderType} reminder appropriate time check: ${isAppropriate}`);
      return isAppropriate;
    } catch (error) {
      console.error('‚ùå ReminderSync: L·ªói ki·ªÉm tra th·ªùi gian ph√π h·ª£p:', error);
      return false; // Kh√¥ng hi·ªÉn th·ªã n·∫øu c√≥ l·ªói ƒë·ªÉ tr√°nh spam
    }
  }

  /**
   * G·ªçi sau khi m·ªôt reminder ƒë∆∞·ª£c trigger ho·∫∑c user th·ª±c hi·ªán action
   */
  async onReminderTriggeredOrCancelled(): Promise<void> {
    console.log('üîÑ ReminderSync: Reminder triggered/cancelled, re-syncing...');

    // ‚úÖ CRITICAL FIX: Lu√¥n l·∫•y active shift m·ªõi nh·∫•t t·ª´ storage
    // Kh√¥ng d·ª±a v√†o this.currentActiveShift c√≥ th·ªÉ ƒë√£ c≈© ho·∫∑c null
    let activeShift: Shift | undefined = this.currentActiveShift || undefined;

    if (!activeShift) {
      console.log('‚ö†Ô∏è ReminderSync: No cached active shift, fetching from storage...');
      const activeShiftId = await storageService.getActiveShiftId();
      if (activeShiftId) {
        const shifts = await storageService.getShiftList();
        activeShift = shifts.find(s => s.id === activeShiftId);

        if (activeShift) {
          console.log(`‚úÖ ReminderSync: Found active shift from storage: ${activeShift.name}`);
        } else {
          console.log('‚ö†Ô∏è ReminderSync: Active shift ID found but shift not in list');
        }
      } else {
        console.log('‚ö†Ô∏è ReminderSync: No active shift ID in storage');
      }
    }

    // ‚úÖ ADDITIONAL SAFETY: Th√™m delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o UI ƒë√£ ho√†n t·∫•t
    console.log('‚è≥ ReminderSync: Adding safety delay before sync...');
    await new Promise(resolve => setTimeout(resolve, 500));

    await this.syncNextReminders(activeShift);
  }

  /**
   * ‚úÖ FORCE RESET: D√†nh cho khi user √°p d·ª•ng ca m·ªõi
   * CH·ªà d·ªçn d·∫πp, KH√îNG l√™n l·ªãch ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh "c∆°n b√£o" th√¥ng b√°o
   */
  async forceResetForNewShift(newShift: Shift): Promise<void> {
    try {
      console.log('üîÑ ReminderSync: FORCE RESET for new shift application');
      console.log(`üè¢ New shift: ${newShift.name}`);
      console.log(`‚è∞ Current time: ${new Date().toLocaleString('vi-VN')}`);

      // B∆Ø·ªöC 1: D·ªçn d·∫πp ho√†n to√†n
      console.log('üßπ Step 1: Complete cleanup of all old reminders...');
      await this.cleanupOldReminders();

      // B∆Ø·ªöC 2: ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o cleanup ho√†n t·∫•t
      await new Promise(resolve => setTimeout(resolve, 1000));

      // ‚úÖ CRITICAL FIX: KH√îNG g·ªçi syncNextReminders ngay l·∫≠p t·ª©c
      // Thay v√†o ƒë√≥, l√™n l·ªãch sync sau 5 ph√∫t ƒë·ªÉ tr√°nh th√¥ng b√°o ngay l·∫≠p t·ª©c
      console.log('‚è≥ Step 2: Scheduling delayed sync to avoid immediate notifications...');
      setTimeout(async () => {
        try {
          console.log('üìÖ ReminderSync: Starting delayed sync after force reset...');
          await this.syncNextReminders(newShift);
          console.log('‚úÖ ReminderSync: Delayed sync completed');
        } catch (delayedError) {
          console.error('‚ùå ReminderSync: Error in delayed sync:', delayedError);
        }
      }, 300000); // 5 ph√∫t delay

      console.log('‚úÖ ReminderSync: Force reset completed - NO immediate sync, NO immediate notifications');
    } catch (error) {
      console.error('‚ùå ReminderSync: Error during force reset:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ IMMEDIATE SYNC: Ch·ªâ d√πng khi th·ª±c s·ª± c·∫ßn thi·∫øt (v√≠ d·ª•: user test ho·∫∑c debug)
   * C·∫¢NH B√ÅO: C√≥ th·ªÉ g√¢y th√¥ng b√°o ngay l·∫≠p t·ª©c n·∫øu kh√¥ng c·∫©n th·∫≠n
   */
  async forceSyncImmediately(activeShift: Shift, reason: string): Promise<void> {
    try {
      console.log(`üö® ReminderSync: IMMEDIATE SYNC requested - Reason: ${reason}`);
      console.log(`‚ö†Ô∏è WARNING: This may cause immediate notifications if not used carefully`);

      await this.syncNextReminders(activeShift);

      console.log(`‚úÖ ReminderSync: Immediate sync completed for reason: ${reason}`);
    } catch (error) {
      console.error('‚ùå ReminderSync: Error during immediate sync:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ IMMEDIATE SYNC: Ch·ªâ d√πng khi th·ª±c s·ª± c·∫ßn thi·∫øt (v√≠ d·ª•: user test ho·∫∑c debug)
   * C·∫¢NH B√ÅO: C√≥ th·ªÉ g√¢y th√¥ng b√°o ngay l·∫≠p t·ª©c n·∫øu kh√¥ng c·∫©n th·∫≠n
   */
  async forceSyncImmediately(activeShift: Shift, reason: string): Promise<void> {
    try {
      console.log(`üö® ReminderSync: IMMEDIATE SYNC requested - Reason: ${reason}`);
      console.log(`‚ö†Ô∏è WARNING: This may cause immediate notifications if not used carefully`);

      await this.syncNextReminders(activeShift);

      console.log(`‚úÖ ReminderSync: Immediate sync completed for reason: ${reason}`);
    } catch (error) {
      console.error('‚ùå ReminderSync: Error during immediate sync:', error);
      throw error;
    }
  }
}

export const reminderSyncService = new ReminderSyncService();
