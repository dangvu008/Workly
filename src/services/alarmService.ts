/**
 * Alarm Service - H·ªá th·ªëng b√°o th·ª©c s·ª≠ d·ª•ng √¢m thanh v√† rung
 * Thay th·∫ø notifications ƒë·ªÉ ho·∫°t ƒë·ªông trong Expo Go
 */

import { Platform, Alert, Vibration, AppState, AppStateStatus } from 'react-native';
import { Audio } from 'expo-audio';
import { AlarmData, Shift, Note, UserSettings } from '../types';
import { storageService } from './storage';
import { t } from '../i18n';

interface ScheduledAlarm {
  id: string;
  title: string;
  message: string;
  scheduledTime: Date;
  type: 'shift_reminder' | 'note_reminder' | 'weather_warning';
  relatedId?: string;
  isActive: boolean;
  soundEnabled: boolean;
  vibrationEnabled: boolean;
}

interface AlarmStatus {
  isSupported: boolean;
  hasAudioPermission: boolean;
  isBackgroundEnabled: boolean;
  scheduledCount: number;
  message: string;
}

class AlarmService {
  private alarms: Map<string, ScheduledAlarm> = new Map();
  private checkInterval: NodeJS.Timeout | null = null;
  private sound: Audio.Sound | null = null;
  private isInitialized = false;
  private appState: AppStateStatus = 'active';
  private currentLanguage = 'vi';
  private lastScheduleTime: number = 0;
  private scheduleDebounceTime: number = 1000; // 1 gi√¢y debounce
  private appStateSubscription: any = null;

  // ‚úÖ Track th·ªùi gian l√™n l·ªãch ƒë·ªÉ tr√°nh trigger ngay l·∫≠p t·ª©c
  private alarmScheduleTimes: Map<string, number> = new Map();

  async initialize(): Promise<void> {
    if (this.isInitialized) return;

    try {
      // C·∫•u h√¨nh audio v·ªõi expo-audio
      try {
        if (Audio && Audio.setAudioModeAsync) {
          await Audio.setAudioModeAsync({
            allowsRecordingIOS: false,
            staysActiveInBackground: true,
            playsInSilentModeIOS: true,
            shouldDuckAndroid: true,
            playThroughEarpieceAndroid: false,
          });
        } else {
          console.warn('‚ö†Ô∏è AlarmService: Audio.setAudioModeAsync kh√¥ng kh·∫£ d·ª•ng');
        }
      } catch (audioError) {
        console.warn('‚ö†Ô∏è AlarmService: Kh√¥ng th·ªÉ c·∫•u h√¨nh audio mode:', audioError);
      }

      // Load alarm sound
      await this.loadAlarmSound();

      // L·∫Øng nghe app state changes
      const subscription = AppState.addEventListener('change', this.handleAppStateChange);
      // L∆∞u subscription ƒë·ªÉ cleanup sau n√†y
      this.appStateSubscription = subscription;

      // B·∫Øt ƒë·∫ßu ki·ªÉm tra alarms
      this.startAlarmChecker();

      // Load existing alarms from storage
      await this.loadAlarmsFromStorage();

      // Clear expired alarms ngay sau khi load
      await this.clearExpiredAlarms();

      this.isInitialized = true;
      console.log('‚úÖ AlarmService: ƒê√£ kh·ªüi t·∫°o th√†nh c√¥ng');
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói kh·ªüi t·∫°o:', error);
      throw error;
    }
  }

  private async loadAlarmSound(): Promise<void> {
    try {
      // S·ª≠ d·ª•ng √¢m thanh h·ªá th·ªëng v·ªõi expo-audio
      // T·∫°m th·ªùi disable ƒë·ªÉ tr√°nh l·ªói network v√† t·∫≠p trung v√†o vibration
      // const sound = await Audio.Sound.createAsync(
      //   { uri: 'https://www.soundjay.com/misc/sounds/bell-ringing-05.wav' },
      //   { shouldPlay: false, isLooping: false }
      // );
      // this.sound = sound;

      // T·∫°m th·ªùi disable √¢m thanh, ch·ªâ d√πng vibration
      this.sound = null;
      console.log('üîá AlarmService: √Çm thanh t·∫°m th·ªùi disabled, ch·ªâ s·ª≠ d·ª•ng vibration');
    } catch (error) {
      console.warn('‚ö†Ô∏è AlarmService: Kh√¥ng th·ªÉ load √¢m thanh alarm, s·ª≠ d·ª•ng vibration only');
      this.sound = null;
    }
  }

  private handleAppStateChange = (nextAppState: AppStateStatus) => {
    this.appState = nextAppState;

    if (nextAppState === 'active') {
      // App tr·ªü l·∫°i foreground, ch·ªâ ki·ªÉm tra alarms n·∫øu ƒë√£ qua m·ªôt kho·∫£ng th·ªùi gian
      // Tr√°nh trigger ngay l·∫≠p t·ª©c khi app m·ªõi kh·ªüi ƒë·ªông
      setTimeout(() => {
        this.checkAlarms();
      }, 5000); // TƒÉng l√™n 5 gi√¢y ƒë·ªÉ app ·ªïn ƒë·ªãnh ho√†n to√†n
    }
  };

  private startAlarmChecker(): void {
    // ‚úÖ CRITICAL FIX: Delay initial check ƒë·ªÉ tr√°nh trigger alarms ngay khi app start
    console.log('‚è∞ AlarmService: Starting alarm checker with initial delay...');

    // Delay 10 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu check alarms ƒë·ªÉ app ·ªïn ƒë·ªãnh
    setTimeout(() => {
      console.log('‚è∞ AlarmService: Starting regular alarm checks...');
      this.checkAlarms(); // Check l·∫ßn ƒë·∫ßu sau delay

      // Sau ƒë√≥ ki·ªÉm tra m·ªói 30 gi√¢y
      this.checkInterval = setInterval(() => {
        this.checkAlarms();
      }, 30000);
    }, 10000); // 10 gi√¢y delay
  }

  private async checkAlarms(): Promise<void> {
    const now = new Date();
    const triggeredAlarms: ScheduledAlarm[] = [];

    // ‚úÖ CRITICAL FIX: Tr√°nh trigger alarms c≈© khi app m·ªõi kh·ªüi ƒë·ªông
    const appStartTime = Date.now() - 60000; // 1 ph√∫t tr∆∞·ªõc

    // T√¨m c√°c alarm c·∫ßn k√≠ch ho·∫°t
    for (const [id, alarm] of this.alarms) {
      if (alarm.isActive && alarm.scheduledTime <= now) {
        // ‚úÖ Ki·ªÉm tra xem alarm c√≥ ph·∫£i t·ª´ tr∆∞·ªõc khi app start kh√¥ng
        const scheduleTime = this.alarmScheduleTimes.get(id);
        if (scheduleTime && scheduleTime < appStartTime) {
          console.log(`‚è≠Ô∏è AlarmService: Skipping old alarm ${id} - scheduled before app start`);
          // X√≥a alarm c≈© thay v√¨ trigger
          this.alarms.delete(id);
          this.alarmScheduleTimes.delete(id);
          continue;
        }

        triggeredAlarms.push(alarm);
        // X√≥a alarm ƒë√£ k√≠ch ho·∫°t
        this.alarms.delete(id);
        // ‚úÖ X√≥a tracking time
        this.alarmScheduleTimes.delete(id);
      }
    }

    // K√≠ch ho·∫°t c√°c alarms
    for (const alarm of triggeredAlarms) {
      await this.triggerAlarm(alarm);
    }

    // L∆∞u l·∫°i danh s√°ch alarms
    await this.saveAlarmsToStorage();
  }

  private async triggerAlarm(alarm: ScheduledAlarm): Promise<void> {
    try {
      console.log(`üîî AlarmService: K√≠ch ho·∫°t alarm - ${alarm.title}`);

      // Ph√°t √¢m thanh n·∫øu ƒë∆∞·ª£c b·∫≠t (v·ªõi expo-audio)
      if (alarm.soundEnabled && this.sound) {
        try {
          await this.sound.replayAsync();
        } catch (soundError) {
          console.warn('‚ö†Ô∏è AlarmService: L·ªói ph√°t √¢m thanh:', soundError);
        }
      }

      // Rung n·∫øu ƒë∆∞·ª£c b·∫≠t
      if (alarm.vibrationEnabled) {
        // Rung pattern: 500ms on, 200ms off, repeat 3 times
        Vibration.vibrate([500, 200, 500, 200, 500]);
      }

      // Hi·ªÉn th·ªã alert
      await this.showAlarmAlert(alarm);

      // ‚úÖ JUST-IN-TIME: T·ª± ƒë·ªông re-sync sau khi alarm t·ª± ƒë·ªông trigger (b√°o th·ª©c reo)
      // CH·ªà re-sync khi alarm t·ª± ƒë·ªông trigger, KH√îNG re-sync khi user th·ª±c hi·ªán action
      if (alarm.type === 'shift_reminder') {
        console.log('üîÑ AlarmService: Alarm auto-triggered, re-syncing to schedule next reminder');
        await this.triggerReminderResync();
      }

    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói k√≠ch ho·∫°t alarm:', error);
    }
  }

  /**
   * ‚úÖ K√≠ch ho·∫°t re-sync reminders sau khi alarm ƒë∆∞·ª£c trigger
   */
  private async triggerReminderResync(): Promise<void> {
    try {
      // Import ReminderSyncService ƒë·ªÉ tr√°nh circular dependency
      const { reminderSyncService } = await import('./reminderSync');
      await reminderSyncService.onReminderTriggeredOrCancelled();
    } catch (error) {
      console.error('‚ùå AlarmService: Error triggering reminder re-sync:', error);
    }
  }

  private async showAlarmAlert(alarm: ScheduledAlarm): Promise<void> {
    // ‚úÖ CRITICAL FIX: KI·ªÇM TRA NGHI√äM NG·∫∂T - CH·ªà hi·ªÉn th·ªã khi ƒë·∫øn ƒê√öNG th·ªùi gian ƒë√£ l√™n l·ªãch
    const now = new Date();
    const scheduledTime = alarm.scheduledTime;

    // Ki·ªÉm tra xem c√≥ ph·∫£i ƒë√∫ng th·ªùi gian trigger kh√¥ng (cho ph√©p sai l·ªách 1 ph√∫t)
    const timeDiff = Math.abs(now.getTime() - scheduledTime.getTime());
    const allowedDifference = 60000; // 1 ph√∫t

    if (timeDiff > allowedDifference) {
      console.log(`‚è≠Ô∏è AlarmService: SKIPPED alarm ${alarm.id} - not the right time`);
      console.log(`   üìÖ Scheduled: ${scheduledTime.toLocaleString('vi-VN')}`);
      console.log(`   ‚è∞ Now: ${now.toLocaleString('vi-VN')}`);
      console.log(`   üìä Difference: ${Math.round(timeDiff / 1000)} seconds (allowed: ${allowedDifference / 1000}s)`);
      return;
    }

    // ‚úÖ NGƒÇN CH·∫∂N TH√îNG B√ÅO "N·ªî RA": Ki·ªÉm tra th·ªùi gian l√™n l·ªãch
    const scheduleTime = this.alarmScheduleTimes.get(alarm.id);
    if (scheduleTime) {
      const timeSinceScheduled = now.getTime() - scheduleTime;

      // N·∫øu alarm ƒë∆∞·ª£c l√™n l·ªãch trong v√≤ng 2 ph√∫t v√† trigger ngay, b·ªè qua
      if (timeSinceScheduled < 120000) { // TƒÉng l√™n 2 ph√∫t
        console.log(`‚è≠Ô∏è AlarmService: SKIPPED alarm ${alarm.id} - scheduled too recently (${Math.round(timeSinceScheduled/1000)}s ago)`);
        return;
      }
    }

    // ‚úÖ B√ÅOTH·ª®C TH·ª∞C S·ª∞: Ki·ªÉm tra th·ªùi gian ph√π h·ª£p tr∆∞·ªõc khi hi·ªÉn th·ªã b·∫•t k·ª≥ alarm n√†o
    if (alarm.type === 'shift_reminder' && alarm.relatedId) {
      const reminderType = this.extractReminderTypeFromAlarmId(alarm.id);
      if (reminderType) {
        const isAppropriateTime = await this.isAppropriateTimeForSpecificReminder(
          reminderType,
          alarm.relatedId
        );

        if (!isAppropriateTime) {
          console.log(`‚è≠Ô∏è AlarmService: SKIPPED alarm - inappropriate time for ${reminderType} reminder`);
          return;
        }
      }
    }

    console.log(`‚úÖ AlarmService: SHOWING alarm ${alarm.id} at correct time`);
    console.log(`   üìÖ Scheduled: ${scheduledTime.toLocaleString('vi-VN')}`);
    console.log(`   ‚è∞ Now: ${now.toLocaleString('vi-VN')}`);

    // ‚úÖ Ki·ªÉm tra xem c√≥ ƒëang ch·∫°y trong Expo Go kh√¥ng
    const isExpoGo = this.isRunningInExpoGo();

    if (isExpoGo) {
      // ‚úÖ Trong Expo Go, hi·ªÉn th·ªã fallback alert (ƒë√£ ki·ªÉm tra th·ªùi gian ·ªü tr√™n)
      await this.showExpoGoFallbackAlert(alarm);
      return;
    }

    const buttons = [
      {
        text: t(this.currentLanguage, 'common.ok'),
        onPress: () => {
          this.stopAlarmSound();
        }
      }
    ];

    // Th√™m n√∫t snooze cho note reminders
    if (alarm.type === 'note_reminder') {
      buttons.unshift({
        text: '‚è∞ B√°o l·∫°i 5 ph√∫t',
        onPress: () => {
          this.snoozeAlarm(alarm, 5);
        }
      });
    }

    Alert.alert(
      `üîî ${alarm.title}`,
      alarm.message,
      buttons,
      {
        cancelable: false,
        onDismiss: () => this.stopAlarmSound()
      }
    );
  }

  /**
   * ‚úÖ B√ÅOTH·ª®C TH·ª∞C S·ª∞: Hi·ªÉn th·ªã fallback alert cho Expo Go
   * (Th·ªùi gian ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra ·ªü showAlarmAlert)
   */
  private async showExpoGoFallbackAlert(alarm: ScheduledAlarm): Promise<void> {
    // Th·ªùi gian ph√π h·ª£p ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra ·ªü showAlarmAlert, kh√¥ng c·∫ßn ki·ªÉm tra l·∫°i

    const title = alarm.type === 'shift_reminder' ? 'Nh·∫Øc nh·ªü ca l√†m vi·ªác' : 'Nh·∫Øc nh·ªü ghi ch√∫';
    const message = `${alarm.message}\n\nüì± B·∫°n ƒëang s·ª≠ d·ª•ng Expo Go. ƒê·ªÉ c√≥ ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng √¢m thanh v√† rung, h√£y s·ª≠ d·ª•ng development build.`;

    Alert.alert(
      `üì± ${title}`,
      message,
      [
        {
          text: 'ƒê√£ hi·ªÉu',
          style: 'default',
          onPress: () => this.stopAlarmSound()
        }
      ],
      {
        cancelable: false,
        onDismiss: () => this.stopAlarmSound()
      }
    );

    console.log(`üì± AlarmService: Showed Expo Go fallback alert for: ${alarm.title}`);
  }

  /**
   * ‚úÖ Ki·ªÉm tra xem c√≥ ph·∫£i th·ªùi gian ph√π h·ª£p ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o cho ca l√†m vi·ªác kh√¥ng
   */
  private async isAppropriateTimeForNotification(shiftId: string): Promise<boolean> {
    try {
      const shifts = await storageService.getShiftList();
      const shift = shifts.find((s: Shift) => s.id === shiftId);

      if (!shift) {
        console.log(`‚ö†Ô∏è AlarmService: Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác ${shiftId}`);
        return false;
      }

      // Import timeSyncService ƒë·ªÉ s·ª≠ d·ª•ng logic ki·ªÉm tra th·ªùi gian
      const { timeSyncService } = await import('./timeSync');
      return timeSyncService.isAppropriateTimeForShiftNotifications(shift);
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói ki·ªÉm tra th·ªùi gian ph√π h·ª£p:', error);
      return true; // Fallback: cho ph√©p hi·ªÉn th·ªã n·∫øu c√≥ l·ªói
    }
  }

  /**
   * ‚úÖ Ki·ªÉm tra xem c√≥ ƒëang ch·∫°y trong Expo Go kh√¥ng
   */
  private isRunningInExpoGo(): boolean {
    try {
      const Constants = require('expo-constants');
      return Constants?.executionEnvironment === 'storeClient';
    } catch {
      return false;
    }
  }

  /**
   * ‚úÖ B√ÅOTH·ª®C TH·ª∞C S·ª∞: Tr√≠ch xu·∫•t lo·∫°i reminder t·ª´ alarm ID
   */
  private extractReminderTypeFromAlarmId(alarmId: string): 'departure' | 'checkin' | 'checkout' | null {
    if (alarmId.startsWith('departure_')) {
      return 'departure';
    } else if (alarmId.startsWith('checkin_')) {
      return 'checkin';
    } else if (alarmId.startsWith('checkout_')) {
      return 'checkout';
    }
    return null;
  }

  /**
   * ‚úÖ B√ÅOTH·ª®C TH·ª∞C S·ª∞: Ki·ªÉm tra th·ªùi gian ph√π h·ª£p cho reminder c·ª• th·ªÉ
   */
  private async isAppropriateTimeForSpecificReminder(
    reminderType: 'departure' | 'checkin' | 'checkout',
    shiftId: string
  ): Promise<boolean> {
    try {
      // Import ReminderSyncService ƒë·ªÉ s·ª≠ d·ª•ng logic ki·ªÉm tra th·ªùi gian
      const { reminderSyncService } = await import('./reminderSync');
      return await reminderSyncService.isAppropriateTimeForSpecificReminder(
        reminderType,
        shiftId
      );
    } catch (error) {
      console.error('‚ùå AlarmService: Error checking appropriate time:', error);
      return false; // Kh√¥ng hi·ªÉn th·ªã n·∫øu c√≥ l·ªói ƒë·ªÉ tr√°nh spam
    }
  }

  private async stopAlarmSound(): Promise<void> {
    try {
      if (this.sound) {
        try {
          await this.sound.stopAsync();
        } catch (soundError) {
          console.warn('‚ö†Ô∏è AlarmService: L·ªói d·ª´ng √¢m thanh:', soundError);
        }
      }
      Vibration.cancel();
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói d·ª´ng √¢m thanh:', error);
    }
  }

  private async snoozeAlarm(alarm: ScheduledAlarm, minutes: number): Promise<void> {
    try {
      await this.stopAlarmSound();
      
      // T·∫°o alarm m·ªõi v·ªõi th·ªùi gian snooze
      const snoozeTime = new Date();
      snoozeTime.setMinutes(snoozeTime.getMinutes() + minutes);
      
      const snoozeAlarm: ScheduledAlarm = {
        ...alarm,
        id: `${alarm.id}_snooze_${Date.now()}`,
        scheduledTime: snoozeTime,
        title: `‚è∞ ${alarm.title} (B√°o l·∫°i)`,
      };

      this.alarms.set(snoozeAlarm.id, snoozeAlarm);
      await this.saveAlarmsToStorage();
      
      console.log(`‚è∞ AlarmService: ƒê√£ snooze alarm ${minutes} ph√∫t`);
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói snooze alarm:', error);
    }
  }

  // Public methods
  async scheduleShiftReminder(shift: Shift): Promise<void> {
    try {
      await this.initialize();

      // ‚úÖ Debounce ƒë·ªÉ tr√°nh g·ªçi li√™n t·ª•c
      const now = Date.now();
      if (now - this.lastScheduleTime < this.scheduleDebounceTime) {
        console.log('‚è≠Ô∏è AlarmService: Skipping schedule due to debounce');
        return;
      }
      this.lastScheduleTime = now;

      const settings = await storageService.getUserSettings();
      this.currentLanguage = settings.language || 'vi';

      if (!settings.alarmSoundEnabled && !settings.alarmVibrationEnabled) {
        console.log('üîï AlarmService: C·∫£ √¢m thanh v√† rung ƒë·ªÅu b·ªã t·∫Øt, b·ªè qua l·∫≠p l·ªãch');
        return;
      }

      // ‚úÖ S·ª¨ D·ª§NG LOGIC JUST-IN-TIME: Ch·ªâ l√™n l·ªãch cho alarm ti·∫øp theo
      console.log('üîî AlarmService: Using just-in-time scheduling logic');

      // Logic c≈© (l√™n l·ªãch 7 ng√†y) ƒë√£ ƒë∆∞·ª£c thay th·∫ø b·∫±ng ReminderSyncService
      // AlarmService gi·ªù ch·ªâ ch·ªãu tr√°ch nhi·ªám l√™n l·ªãch t·ª´ng alarm c·ª• th·ªÉ
      // khi ƒë∆∞·ª£c g·ªçi t·ª´ ReminderSyncService

      console.log('‚úÖ AlarmService: Shift alarms will be managed by ReminderSyncService');
      return;
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói l·∫≠p l·ªãch shift reminders:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ JUST-IN-TIME: L√™n l·ªãch m·ªôt alarm c·ª• th·ªÉ
   * ƒê∆∞·ª£c g·ªçi t·ª´ ReminderSyncService
   */
  async scheduleSpecificAlarm(
    type: 'departure' | 'checkin' | 'checkout',
    shift: Shift,
    triggerTime: Date,
    dateString: string
  ): Promise<void> {
    try {
      await this.initialize();

      const settings = await storageService.getUserSettings();
      this.currentLanguage = settings.language || 'vi';

      if (!settings.alarmSoundEnabled && !settings.alarmVibrationEnabled) {
        console.log(`üîï AlarmService: C·∫£ √¢m thanh v√† rung ƒë·ªÅu b·ªã t·∫Øt, b·ªè qua l·∫≠p l·ªãch ${type} alarm`);
        return;
      }

      // ‚úÖ CRITICAL FIX: Ki·ªÉm tra th·ªùi gian trigger - PH·∫¢I L√Ä T∆Ø∆†NG LAI
      const now = new Date();
      if (triggerTime <= now) {
        console.log(`‚è≠Ô∏è AlarmService: SKIPPED ${type} alarm - trigger time ${triggerTime.toLocaleString('vi-VN')} is in the past (now: ${now.toLocaleString('vi-VN')})`);
        return;
      }

      // ‚úÖ Ki·ªÉm tra th·ªùi gian h·ª£p l√Ω - kh√¥ng qu√° xa trong t∆∞∆°ng lai
      const timeDiff = triggerTime.getTime() - now.getTime();
      const maxFutureTime = 7 * 24 * 60 * 60 * 1000; // 7 ng√†y
      if (timeDiff > maxFutureTime) {
        console.log(`‚è≠Ô∏è AlarmService: SKIPPED ${type} alarm - trigger time too far in future (${Math.round(timeDiff / 1000 / 60 / 60 / 24)} days)`);
        return;
      }

      const alarmId = `${type}_${dateString}`;
      let title: string;
      let message: string;

      switch (type) {
        case 'departure':
          title = t(this.currentLanguage, 'alarms.departureTitle');
          message = t(this.currentLanguage, 'alarms.departureMessage')
            .replace('{time}', shift.departureTime)
            .replace('{shift}', shift.name);
          break;
        case 'checkin':
          title = t(this.currentLanguage, 'alarms.checkinTitle');
          message = t(this.currentLanguage, 'alarms.checkinMessage')
            .replace('{shift}', shift.name);
          break;
        case 'checkout':
          title = t(this.currentLanguage, 'alarms.checkoutTitle');
          message = t(this.currentLanguage, 'alarms.checkoutMessage')
            .replace('{shift}', shift.name);
          break;
      }

      const alarm: ScheduledAlarm = {
        id: alarmId,
        title,
        message,
        scheduledTime: triggerTime,
        type: 'shift_reminder',
        relatedId: shift.id,
        isActive: true,
        soundEnabled: settings.alarmSoundEnabled,
        vibrationEnabled: settings.alarmVibrationEnabled,
      };

      this.alarms.set(alarmId, alarm);

      // ‚úÖ Track th·ªùi gian l√™n l·ªãch ƒë·ªÉ tr√°nh trigger ngay l·∫≠p t·ª©c
      this.alarmScheduleTimes.set(alarmId, Date.now());

      await this.saveAlarmsToStorage();

      console.log(`üîî AlarmService: Scheduled ${type} alarm for ${dateString} at ${triggerTime.toLocaleTimeString()}`);
    } catch (error) {
      console.error(`‚ùå AlarmService: Error scheduling ${type} alarm:`, error);
      throw error;
    }
  }

  /**
   * ‚úÖ JUST-IN-TIME: H·ªßy alarm c·ª• th·ªÉ theo type v√† date
   */
  async cancelSpecificAlarmByDate(type: 'departure' | 'checkin' | 'checkout', dateString: string): Promise<void> {
    try {
      const alarmId = `${type}_${dateString}`;
      this.alarms.delete(alarmId);

      // ‚úÖ X√≥a tracking time
      this.alarmScheduleTimes.delete(alarmId);

      await this.saveAlarmsToStorage();
      console.log(`üóëÔ∏è AlarmService: Cancelled ${type} alarm for ${dateString}`);
    } catch (error) {
      console.error(`‚ùå AlarmService: Error cancelling ${type} alarm:`, error);
    }
  }



  async scheduleNoteReminder(note: Note): Promise<void> {
    try {
      await this.initialize();

      // ‚úÖ Ki·ªÉm tra t√πy ch·ªçn th√¥ng b√°o c·ªßa ghi ch√∫
      if (note.enableNotifications === false) {
        console.log(`üîî AlarmService: Ghi ch√∫ "${note.title}" ƒë√£ t·∫Øt th√¥ng b√°o, b·ªè qua l·∫≠p l·ªãch alarm`);
        return;
      }

      const settings = await storageService.getUserSettings();
      this.currentLanguage = settings.language || 'vi';

      // X√≥a reminder c≈© n·∫øu c√≥
      await this.cancelNoteReminder(note.id);

      // Handle specific datetime reminders
      if (note.reminderDateTime) {
        const reminderTime = new Date(note.reminderDateTime);
        const now = new Date();

        if (reminderTime <= now) return;

        const alarmId = `note_${note.id}`;
        const alarm: ScheduledAlarm = {
          id: alarmId,
          title: `üìù ${note.title}`,
          message: note.content.length > 100
            ? note.content.substring(0, 100) + '...'
            : note.content,
          scheduledTime: reminderTime,
          type: 'note_reminder',
          relatedId: note.id,
          isActive: true,
          soundEnabled: settings.alarmSoundEnabled,
          vibrationEnabled: settings.alarmVibrationEnabled,
        };

        this.alarms.set(alarmId, alarm);
        await this.saveAlarmsToStorage();

        console.log(`‚úÖ AlarmService: ƒê√£ l·∫≠p l·ªãch alarm cho note ${note.title}`);
        return;
      }

      // Handle shift-based reminders
      if (note.associatedShiftIds && note.associatedShiftIds.length > 0) {
        await this.scheduleShiftBasedNoteReminders(note);
      }
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói l·∫≠p l·ªãch note reminder:', error);
      throw error;
    }
  }

  /**
   * L·∫≠p l·ªãch alarm cho note d·ª±a tr√™n shift (5 ph√∫t tr∆∞·ªõc departure time)
   */
  private async scheduleShiftBasedNoteReminders(note: Note): Promise<void> {
    if (!note.associatedShiftIds || note.associatedShiftIds.length === 0) return;

    const { timeSyncService } = await import('./timeSync');
    const shifts = await storageService.getShiftList();
    const settings = await storageService.getUserSettings();

    for (const shiftId of note.associatedShiftIds) {
      const shift = shifts.find((s: Shift) => s.id === shiftId);
      if (!shift) continue;

      // T√≠nh to√°n th·ªùi gian nh·∫Øc nh·ªü cho 7 ng√†y t·ªõi
      const reminderTimes = timeSyncService.calculateShiftBasedReminderTimes(shift);

      // L·∫≠p l·ªãch cho t·ª´ng th·ªùi gian
      for (let i = 0; i < reminderTimes.length; i++) {
        const reminderTime = reminderTimes[i];
        const alarmId = `note_shift_${note.id}_${shiftId}_${i}`;

        const alarm: ScheduledAlarm = {
          id: alarmId,
          title: `üìù ${note.title}`,
          message: `${note.content.length > 80 ? note.content.substring(0, 80) + '...' : note.content} (Ca: ${shift.name})`,
          scheduledTime: reminderTime,
          type: 'note_reminder',
          relatedId: note.id,
          isActive: true,
          soundEnabled: settings.alarmSoundEnabled,
          vibrationEnabled: settings.alarmVibrationEnabled,
        };

        this.alarms.set(alarmId, alarm);
      }
    }

    await this.saveAlarmsToStorage();
    console.log(`‚úÖ AlarmService: ƒê√£ l·∫≠p l·ªãch shift-based alarms cho note ${note.title}`);
  }

  async cancelShiftReminders(shiftId?: string): Promise<void> {
    try {
      const toDelete: string[] = [];
      
      for (const [id, alarm] of this.alarms) {
        if (alarm.type === 'shift_reminder') {
          if (!shiftId || alarm.relatedId === shiftId) {
            toDelete.push(id);
          }
        }
      }

      toDelete.forEach(id => this.alarms.delete(id));
      await this.saveAlarmsToStorage();
      
      console.log(`üóëÔ∏è AlarmService: ƒê√£ x√≥a ${toDelete.length} shift alarms`);
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói x√≥a shift reminders:', error);
    }
  }

  async cancelNoteReminder(noteId: string): Promise<void> {
    try {
      // Cancel specific datetime reminder
      const alarmId = `note_${noteId}`;
      this.alarms.delete(alarmId);

      // Cancel all shift-based reminders for this note
      const toDelete: string[] = [];
      for (const [id, alarm] of this.alarms) {
        if (id.startsWith(`note_shift_${noteId}_`)) {
          toDelete.push(id);
        }
      }

      for (const id of toDelete) {
        this.alarms.delete(id);
      }

      await this.saveAlarmsToStorage();

      console.log(`üóëÔ∏è AlarmService: ƒê√£ x√≥a note alarm ${noteId} v√† ${toDelete.length} shift-based alarms`);
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói x√≥a note reminder:', error);
    }
  }

  // Utility methods
  private parseTime(timeString: string): { hours: number; minutes: number } {
    const [hours, minutes] = timeString.split(':').map(Number);
    return { hours, minutes };
  }

  private async saveAlarmsToStorage(): Promise<void> {
    try {
      const alarmsArray = Array.from(this.alarms.values());
      // S·ª≠ d·ª•ng saveData method ƒë√£ ƒë∆∞·ª£c th√™m v√†o StorageService
      await storageService.saveData('scheduled_alarms', alarmsArray);
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói l∆∞u alarms:', error);
    }
  }

  private async loadAlarmsFromStorage(): Promise<void> {
    try {
      // S·ª≠ d·ª•ng getData method ƒë√£ ƒë∆∞·ª£c th√™m v√†o StorageService
      const alarmsArray = await storageService.getData('scheduled_alarms', []);
      this.alarms.clear();

      const now = new Date();
      let validAlarmsCount = 0;
      let expiredAlarmsCount = 0;

      for (const alarmData of alarmsArray) {
        const alarm: ScheduledAlarm = {
          ...(alarmData as any),
          scheduledTime: new Date((alarmData as any).scheduledTime),
        };

        // Ki·ªÉm tra alarm c√≥ h·ª£p l·ªá kh√¥ng (th·ªùi gian trong t∆∞∆°ng lai v√† kh√¥ng qu√° xa)
        const timeDiff = alarm.scheduledTime.getTime() - now.getTime();
        const maxFutureTime = 7 * 24 * 60 * 60 * 1000; // 7 ng√†y

        if (timeDiff > 0 && timeDiff <= maxFutureTime) {
          // Alarm h·ª£p l·ªá - trong t∆∞∆°ng lai v√† kh√¥ng qu√° 7 ng√†y
          this.alarms.set(alarm.id, alarm);
          validAlarmsCount++;
        } else {
          // Alarm ƒë√£ h·∫øt h·∫°n ho·∫∑c qu√° xa - b·ªè qua
          expiredAlarmsCount++;
        }
      }

      // L∆∞u l·∫°i danh s√°ch ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
      if (expiredAlarmsCount > 0) {
        await this.saveAlarmsToStorage();
      }

      console.log(`üì• AlarmService: ƒê√£ load ${validAlarmsCount} alarms h·ª£p l·ªá, b·ªè qua ${expiredAlarmsCount} alarms h·∫øt h·∫°n`);
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói load alarms:', error);
    }
  }

  async getAlarmStatus(): Promise<AlarmStatus> {
    await this.initialize();

    return {
      isSupported: true,
      hasAudioPermission: this.sound !== null,
      isBackgroundEnabled: this.checkInterval !== null,
      scheduledCount: this.alarms.size,
      message: `H·ªá th·ªëng b√°o th·ª©c ƒëang ho·∫°t ƒë·ªông v·ªõi ${this.alarms.size} l·ªãch nh·∫Øc nh·ªü`,
    };
  }

  /**
   * ‚úÖ FORCE CLEANUP: X√≥a t·∫•t c·∫£ alarm v√† t·∫°o l·∫°i t·ª´ ƒë·∫ßu
   * S·ª≠ d·ª•ng khi c√≥ v·∫•n ƒë·ªÅ v·ªõi alarm c≈©
   */
  async forceCleanupAndReset(): Promise<void> {
    try {
      console.log('üßπ AlarmService: Force cleanup - X√≥a t·∫•t c·∫£ alarm c≈©...');

      // D·ª´ng t·∫•t c·∫£ √¢m thanh v√† rung
      await this.stopAlarmSound();

      // X√≥a t·∫•t c·∫£ alarm trong memory
      this.alarms.clear();

      // X√≥a t·∫•t c·∫£ alarm trong storage
      await storageService.saveData('scheduled_alarms', []);

      console.log('‚úÖ AlarmService: Force cleanup ho√†n t·∫•t - T·∫•t c·∫£ alarm ƒë√£ ƒë∆∞·ª£c x√≥a');

      // Trigger re-sync ƒë·ªÉ t·∫°o alarm m·ªõi
      const { reminderSyncService } = await import('./reminderSync');
      await reminderSyncService.syncNextReminders();

      console.log('üîÑ AlarmService: ƒê√£ t·∫°o l·∫°i alarm m·ªõi sau force cleanup');
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói force cleanup:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ DEBUG: Hi·ªÉn th·ªã t·∫•t c·∫£ alarm hi·ªán t·∫°i
   */
  async debugListAllAlarms(): Promise<void> {
    await this.initialize();

    console.log('üîç AlarmService: Danh s√°ch t·∫•t c·∫£ alarm hi·ªán t·∫°i:');
    console.log('='.repeat(60));

    if (this.alarms.size === 0) {
      console.log('üì≠ Kh√¥ng c√≥ alarm n√†o ƒë∆∞·ª£c l·∫≠p l·ªãch');
      return;
    }

    const now = new Date();
    let validCount = 0;
    let expiredCount = 0;

    for (const [id, alarm] of this.alarms) {
      const isExpired = alarm.scheduledTime <= now;
      const timeStatus = isExpired ? '‚ùå ƒê√É H·∫æT H·∫†N' : '‚úÖ H·ª¢P L·ªÜ';

      console.log(`üìã ID: ${id}`);
      console.log(`   üìù Title: ${alarm.title}`);
      console.log(`   ‚è∞ Scheduled: ${alarm.scheduledTime.toLocaleString('vi-VN')}`);
      console.log(`   üîî Type: ${alarm.type}`);
      console.log(`   üìä Status: ${timeStatus}`);
      console.log('   ' + '-'.repeat(50));

      if (isExpired) {
        expiredCount++;
      } else {
        validCount++;
      }
    }

    console.log(`üìä T·ªïng k·∫øt: ${validCount} alarm h·ª£p l·ªá, ${expiredCount} alarm h·∫øt h·∫°n`);

    if (expiredCount > 0) {
      console.log('‚ö†Ô∏è C√≥ alarm h·∫øt h·∫°n - n√™n ch·∫°y force cleanup');
    }
  }

  async testAlarm(): Promise<void> {
    try {
      await this.initialize();

      // T·∫°o test alarm v·ªõi th·ªùi gian 5 gi√¢y sau ƒë·ªÉ tr√°nh trigger ngay l·∫≠p t·ª©c
      const testTime = new Date();
      testTime.setSeconds(testTime.getSeconds() + 5);

      const testAlarm: ScheduledAlarm = {
        id: 'test_alarm',
        title: 'üß™ Test Alarm',
        message: 'H·ªá th·ªëng b√°o th·ª©c ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!',
        scheduledTime: testTime,
        type: 'note_reminder',
        isActive: true,
        soundEnabled: true,
        vibrationEnabled: true,
      };

      // Th√™m v√†o danh s√°ch alarms ƒë·ªÉ ƒë∆∞·ª£c schedule ƒë√∫ng c√°ch
      this.alarms.set(testAlarm.id, testAlarm);
      await this.saveAlarmsToStorage();

      console.log('üß™ AlarmService: Test alarm ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch sau 5 gi√¢y');
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói test alarm:', error);
      throw error;
    }
  }

  // Method ƒë·ªÉ clear t·∫•t c·∫£ alarms c≈©/kh√¥ng h·ª£p l·ªá
  async clearExpiredAlarms(): Promise<void> {
    try {
      const now = new Date();
      let clearedCount = 0;

      // ‚úÖ CRITICAL FIX: X√≥a t·∫•t c·∫£ alarms ƒë√£ h·∫øt h·∫°n v√† tracking times
      for (const [id, alarm] of this.alarms) {
        if (alarm.scheduledTime <= now) {
          this.alarms.delete(id);
          // ‚úÖ X√≥a tracking time t∆∞∆°ng ·ª©ng
          this.alarmScheduleTimes.delete(id);
          clearedCount++;
        }
      }

      if (clearedCount > 0) {
        await this.saveAlarmsToStorage();
        console.log(`üßπ AlarmService: ƒê√£ x√≥a ${clearedCount} alarms h·∫øt h·∫°n khi kh·ªüi ƒë·ªông`);
      } else {
        console.log('‚úÖ AlarmService: Kh√¥ng c√≥ alarms h·∫øt h·∫°n c·∫ßn x√≥a');
      }
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói clear expired alarms:', error);
    }
  }

  // Method ƒë·ªÉ reset ho√†n to√†n t·∫•t c·∫£ alarms (d√πng khi debug)
  async clearAllAlarms(): Promise<void> {
    try {
      this.alarms.clear();
      await storageService.removeData('scheduled_alarms');
      console.log('üóëÔ∏è AlarmService: ƒê√£ x√≥a t·∫•t c·∫£ alarms');
    } catch (error) {
      console.error('‚ùå AlarmService: L·ªói clear all alarms:', error);
    }
  }

  /**
   * ‚úÖ H·ª¶Y ALARMS THEO PATTERN ID
   * H·ªßy b·ªè c√°c alarms c√≥ ID b·∫Øt ƒë·∫ßu v·ªõi pattern c·ª• th·ªÉ
   */
  async cancelAlarmsByPattern(pattern: string): Promise<void> {
    try {
      console.log(`üßπ AlarmService: Cancelling alarms with pattern: ${pattern}`);

      const toDelete: string[] = [];

      for (const [id, alarm] of this.alarms) {
        if (id.startsWith(pattern)) {
          toDelete.push(id);
        }
      }

      toDelete.forEach(id => this.alarms.delete(id));
      await this.saveAlarmsToStorage();

      console.log(`‚úÖ AlarmService: Cancelled ${toDelete.length} alarms with pattern: ${pattern}`);
    } catch (error) {
      console.error(`‚ùå AlarmService: Error cancelling alarms with pattern ${pattern}:`, error);
    }
  }

  /**
   * ‚úÖ L√äN L·ªäCH ALARM V·ªöI ID C√ì QUY T·∫ÆC
   * L√™n l·ªãch alarm v·ªõi ID ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh tr∆∞·ªõc
   */
  async scheduleAlarmWithId(
    identifier: string,
    type: 'departure' | 'checkin' | 'checkout',
    shift: Shift,
    triggerTime: Date,
    dateString: string
  ): Promise<void> {
    try {
      await this.initialize();

      const settings = await storageService.getUserSettings();
      this.currentLanguage = settings.language || 'vi';

      if (!settings.alarmSoundEnabled && !settings.alarmVibrationEnabled) {
        console.log(`üîï AlarmService: C·∫£ √¢m thanh v√† rung ƒë·ªÅu b·ªã t·∫Øt, b·ªè qua l·∫≠p l·ªãch ${type} alarm ${identifier}`);
        return;
      }

      // ‚úÖ CRITICAL FIX: Ki·ªÉm tra th·ªùi gian trigger - PH·∫¢I L√Ä T∆Ø∆†NG LAI
      const now = new Date();
      if (triggerTime <= now) {
        console.log(`‚è≠Ô∏è AlarmService: SKIPPED ${type} alarm ${identifier} - trigger time ${triggerTime.toLocaleString('vi-VN')} is in the past (now: ${now.toLocaleString('vi-VN')})`);
        return;
      }

      // Ki·ªÉm tra th·ªùi gian h·ª£p l√Ω (kh√¥ng qu√° xa trong t∆∞∆°ng lai)
      const timeDiff = triggerTime.getTime() - now.getTime();
      const maxFutureTime = 7 * 24 * 60 * 60 * 1000; // 7 ng√†y

      if (timeDiff > maxFutureTime) {
        console.log(`‚è≠Ô∏è AlarmService: SKIPPED ${type} alarm ${identifier} - too far in future (${Math.round(timeDiff / 1000 / 60 / 60 / 24)} days)`);
        return;
      }

      let title: string;
      let message: string;

      switch (type) {
        case 'departure':
          title = 'üö∂‚Äç‚ôÇÔ∏è Chu·∫©n b·ªã ƒëi l√†m';
          message = `ƒê√£ ƒë·∫øn gi·ªù kh·ªüi h√†nh (${shift.departureTime}) cho ca ${shift.name}`;
          break;
        case 'checkin':
          title = 'üì• Gi·ªù ch·∫•m c√¥ng v√†o';
          message = `ƒê√£ ƒë·∫øn gi·ªù ch·∫•m c√¥ng v√†o cho ca ${shift.name}`;
          break;
        case 'checkout':
          title = 'üì§ Gi·ªù ch·∫•m c√¥ng ra';
          message = `ƒê√£ ƒë·∫øn gi·ªù ch·∫•m c√¥ng ra cho ca ${shift.name}`;
          break;
      }

      const alarm: ScheduledAlarm = {
        id: identifier,
        title,
        message,
        scheduledTime: triggerTime,
        type: 'shift_reminder',
        relatedId: shift.id,
        isActive: true,
        soundEnabled: settings.alarmSoundEnabled,
        vibrationEnabled: settings.alarmVibrationEnabled,
      };

      // ‚úÖ Track th·ªùi gian l√™n l·ªãch ƒë·ªÉ tr√°nh trigger ngay l·∫≠p t·ª©c
      this.alarmScheduleTimes.set(identifier, Date.now());

      this.alarms.set(identifier, alarm);
      await this.saveAlarmsToStorage();

      console.log(`üîî AlarmService: Scheduled ${type} alarm ${identifier} for ${triggerTime.toLocaleString('vi-VN')}`);
    } catch (error) {
      console.error(`‚ùå AlarmService: Error scheduling ${type} alarm ${identifier}:`, error);
      throw error;
    }
  }

  /**
   * ‚úÖ H·ª¶Y ALARM THEO ID C·ª§ TH·ªÇ
   * H·ªßy b·ªè alarm v·ªõi ID c·ª• th·ªÉ
   */
  async cancelAlarmById(identifier: string): Promise<void> {
    try {
      if (this.alarms.has(identifier)) {
        this.alarms.delete(identifier);
        this.alarmScheduleTimes.delete(identifier);
        await this.saveAlarmsToStorage();
        console.log(`üîï AlarmService: Cancelled alarm: ${identifier}`);
      }
    } catch (error) {
      console.error(`‚ùå AlarmService: Error cancelling alarm ${identifier}:`, error);
    }
  }

  // Cleanup
  destroy(): void {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }

    if (this.sound) {
      try {
        this.sound.unloadAsync();
      } catch (error) {
        console.warn('‚ö†Ô∏è AlarmService: L·ªói unload sound:', error);
      }
      this.sound = null;
    }

    // Cleanup AppState subscription
    if (this.appStateSubscription) {
      this.appStateSubscription.remove();
      this.appStateSubscription = null;
    }
    this.isInitialized = false;

    console.log('üßπ AlarmService: ƒê√£ cleanup');
  }
}

export const alarmService = new AlarmService();
