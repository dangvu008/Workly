import { Platform, Alert } from 'react-native';
import { AlarmData, Shift, Note } from '../types';
import { NOTIFICATION_CATEGORIES } from '../constants';
import { storageService } from './storage';

// Import notifications v·ªõi error handling cho Expo SDK 53+
let Notifications: any = null;
let Constants: any = null;

// Safe import ƒë·ªÉ tr√°nh crash trong Expo Go
try {
  Notifications = require('expo-notifications');
  Constants = require('expo-constants');
} catch (error) {
  console.warn('‚ö†Ô∏è Workly: expo-notifications kh√¥ng kh·∫£ d·ª•ng trong m√¥i tr∆∞·ªùng n√†y');
}

// Check if running in Expo Go
const isRunningInExpoGo = () => {
  try {
    return Constants?.executionEnvironment === 'storeClient';
  } catch {
    return false;
  }
};

// Check if notifications are available (considering SDK 53+ limitations)
const isNotificationsFullySupported = () => {
  // Trong Expo Go SDK 53+, push notifications kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
  if (isRunningInExpoGo()) {
    console.log('üì± Workly: ƒêang ch·∫°y trong Expo Go - Push notifications b·ªã h·∫°n ch·∫ø');
    return false;
  }
  return Notifications !== null;
};

// Check if notifications are available
const isNotificationsAvailable = () => {
  return Notifications !== null && typeof Notifications.setNotificationHandler === 'function';
};

// Configure notification behavior v·ªõi safe check
if (isNotificationsAvailable()) {
  try {
    Notifications.setNotificationHandler({
      handleNotification: async () => ({
        shouldShowBanner: true,
        shouldShowList: true,
        shouldPlaySound: true,
        shouldSetBadge: false,
      }),
    });
  } catch (error) {
    console.warn('‚ö†Ô∏è Workly: Kh√¥ng th·ªÉ c·∫•u h√¨nh notification handler:', error);
  }
}

interface NotificationStatus {
  isSupported: boolean;
  isExpoGo: boolean;
  hasPermission: boolean;
  platform: string;
  message: string;
  canSchedule: boolean;
}

class NotificationService {
  private isInitialized = false;
  private isAvailable = false;
  private status: NotificationStatus | null = null;

  async initialize(): Promise<void> {
    if (this.isInitialized) return;

    try {
      // Ki·ªÉm tra xem notifications c√≥ ƒë·∫ßy ƒë·ªß h·ªó tr·ª£ kh√¥ng (bao g·ªìm c·∫£ Expo Go limitations)
      if (!isNotificationsFullySupported()) {
        this.isAvailable = false;
        this.status = {
          isSupported: false,
          isExpoGo: isRunningInExpoGo(),
          hasPermission: false,
          platform: Platform.OS,
          message: isRunningInExpoGo()
            ? 'Push notifications kh√¥ng kh·∫£ d·ª•ng trong Expo Go (SDK 53+). S·ª≠ d·ª•ng development build ƒë·ªÉ c√≥ ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng.'
            : 'expo-notifications kh√¥ng kh·∫£ d·ª•ng trong m√¥i tr∆∞·ªùng n√†y.',
          canSchedule: false
        };
        console.warn('‚ö†Ô∏è Workly: Notifications kh√¥ng ƒë·∫ßy ƒë·ªß h·ªó tr·ª£ - s·ª≠ d·ª•ng AlarmService thay th·∫ø');
        this.isInitialized = true;
        return;
      }

      const isExpoGo = isRunningInExpoGo();

      // Ki·ªÉm tra m√¥i tr∆∞·ªùng Expo Go
      if (isExpoGo && Platform.OS === 'android') {
        this.isAvailable = false;
        this.status = {
          isSupported: false,
          isExpoGo: true,
          hasPermission: false,
          platform: Platform.OS,
          message: 'Push notifications kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ trong Expo Go tr√™n Android. S·ª≠ d·ª•ng development build ƒë·ªÉ c√≥ ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng.',
          canSchedule: false
        };
        console.warn('‚ö†Ô∏è Workly: Push notifications kh√¥ng ho·∫°t ƒë·ªông trong Expo Go tr√™n Android');
        this.isInitialized = true;
        return;
      }

      // Request permissions
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }

      const hasPermission = finalStatus === 'granted';

      if (!hasPermission) {
        console.warn('‚ö†Ô∏è Workly: Notification permission not granted. Nh·∫Øc nh·ªü s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.');
      }

      // Configure notification categories for Android
      if (Platform.OS === 'android' && hasPermission) {
        await this.setupNotificationChannels();
      }

      this.isAvailable = hasPermission;
      this.status = {
        isSupported: hasPermission,
        isExpoGo,
        hasPermission,
        platform: Platform.OS,
        message: hasPermission
          ? 'Notifications ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng'
          : 'C·∫ßn c·∫•p quy·ªÅn notification ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng nh·∫Øc nh·ªü',
        canSchedule: hasPermission
      };

      this.isInitialized = true;

      if (hasPermission) {
        console.log('‚úÖ Workly: Notifications ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng');
      }
    } catch (error) {
      console.error('Error initializing notifications:', error);
      this.isAvailable = false;
      this.status = {
        isSupported: false,
        isExpoGo: isRunningInExpoGo(),
        hasPermission: false,
        platform: Platform.OS,
        message: `L·ªói kh·ªüi t·∫°o notifications: ${error instanceof Error ? error.message : 'Unknown error'}`,
        canSchedule: false
      };
      this.isInitialized = true;
    }
  }

  private async setupNotificationChannels(): Promise<void> {
    if (!isNotificationsAvailable()) return;

    try {
      await Notifications.setNotificationChannelAsync('shift_reminders', {
        name: 'Nh·∫Øc nh·ªü ca l√†m vi·ªác',
        importance: Notifications.AndroidImportance.HIGH,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#FF231F7C',
        sound: 'default',
        enableVibrate: true,
      });

      await Notifications.setNotificationChannelAsync('note_reminders', {
        name: 'Nh·∫Øc nh·ªü ghi ch√∫',
        importance: Notifications.AndroidImportance.HIGH,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#FF231F7C',
        sound: 'default',
        enableVibrate: true,
      });

      await Notifications.setNotificationChannelAsync('weather_warnings', {
        name: 'C·∫£nh b√°o th·ªùi ti·∫øt',
        importance: Notifications.AndroidImportance.DEFAULT,
        vibrationPattern: [0, 250],
        lightColor: '#FF231F7C',
        sound: 'default',
        enableVibrate: true,
      });

      await Notifications.setNotificationChannelAsync('shift_rotation', {
        name: 'Xoay ca l√†m vi·ªác',
        importance: Notifications.AndroidImportance.DEFAULT,
        vibrationPattern: [0, 250],
        lightColor: '#FF231F7C',
        sound: 'default',
        enableVibrate: true,
      });
    } catch (error) {
      console.error('Error setting up notification channels:', error);
    }
  }

  // Getter cho notification status
  getNotificationStatus(): NotificationStatus | null {
    return this.status;
  }

  // Ki·ªÉm tra xem c√≥ th·ªÉ l·∫≠p l·ªãch notifications kh√¥ng
  canScheduleNotifications(): boolean {
    return this.isAvailable && this.status?.canSchedule === true;
  }

  // L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ tr·∫°ng th√°i notifications
  async getDetailedStatus(): Promise<{
    status: NotificationStatus;
    scheduledCount: number;
    environment: string;
    recommendations: string[];
  }> {
    await this.initialize();

    let scheduledCount = 0;
    try {
      if (this.canScheduleNotifications()) {
        const scheduled = await Notifications.getAllScheduledNotificationsAsync();
        scheduledCount = scheduled.length;
      }
    } catch (error) {
      console.warn('Could not get scheduled notifications count:', error);
    }

    const environment = this.status?.isExpoGo ? 'Expo Go' : 'Development/Production Build';

    const recommendations: string[] = [];
    if (this.status?.isExpoGo) {
      recommendations.push('S·ª≠ d·ª•ng development build ƒë·ªÉ c√≥ ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng notifications');
      recommendations.push('Ch·∫°y l·ªánh: eas build --profile development --platform android');
    } else if (!this.status?.hasPermission) {
      recommendations.push('C·∫•p quy·ªÅn notifications trong Settings c·ªßa thi·∫øt b·ªã');
      recommendations.push('Kh·ªüi ƒë·ªông l·∫°i app sau khi c·∫•p quy·ªÅn');
    }

    return {
      status: this.status || {
        isSupported: false,
        isExpoGo: false,
        hasPermission: false,
        platform: Platform.OS,
        message: 'Ch∆∞a kh·ªüi t·∫°o',
        canSchedule: false
      },
      scheduledCount,
      environment,
      recommendations
    };
  }

  // Test notification ƒë·ªÉ ki·ªÉm tra ho·∫°t ƒë·ªông
  async testNotification(): Promise<void> {
    try {
      await this.initialize();

      if (!this.canScheduleNotifications()) {
        this.showFallbackAlert(
          'Test Notification',
          'Kh√¥ng th·ªÉ g·ª≠i test notification trong m√¥i tr∆∞·ªùng hi·ªán t·∫°i.'
        );
        return;
      }

      await Notifications.scheduleNotificationAsync({
        identifier: `test_${Date.now()}`,
        content: {
          title: 'üß™ Test Notification',
          body: 'Notifications ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!',
          data: { type: 'test' },
        },
        trigger: null, // Show immediately
      });
    } catch (error) {
      console.error('Test notification failed:', error);
      throw error;
    }
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o fallback khi notifications kh√¥ng kh·∫£ d·ª•ng
  private showFallbackAlert(title: string, message: string): void {
    Alert.alert(
      `üì± ${title}`,
      `${message}\n\nüí° ƒê·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng nh·∫Øc nh·ªü, h√£y t·∫°o development build ho·∫∑c build production.`,
      [{ text: 'ƒê√£ hi·ªÉu', style: 'default' }]
    );
  }

  async scheduleShiftReminders(shift: Shift): Promise<void> {
    try {
      await this.initialize();

      if (!this.canScheduleNotifications()) {
        console.log('üì± Workly: Notifications kh√¥ng kh·∫£ d·ª•ng, b·ªè qua l·∫≠p l·ªãch nh·∫Øc nh·ªü ca l√†m vi·ªác');
        // Hi·ªÉn th·ªã th√¥ng b√°o fallback cho ng∆∞·ªùi d√πng
        if (this.status?.isExpoGo) {
          this.showFallbackAlert(
            'Nh·∫Øc nh·ªü ca l√†m vi·ªác',
            'T√≠nh nƒÉng nh·∫Øc nh·ªü ca l√†m vi·ªác s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t khi b·∫°n s·ª≠ d·ª•ng development build.'
          );
        }
        return;
      }

      // ‚úÖ B∆Ø·ªöC 1: H·ªßy t·∫•t c·∫£ th√¥ng b√°o c≈© tr∆∞·ªõc khi l√™n l·ªãch m·ªõi
      await this.cancelAllShiftReminders();

      const settings = await storageService.getUserSettings();
      if (!settings.alarmSoundEnabled && !settings.alarmVibrationEnabled) {
        console.log('üîï NotificationService: C·∫£ √¢m thanh v√† rung ƒë·ªÅu b·ªã t·∫Øt, b·ªè qua l·∫≠p l·ªãch');
        return;
      }

      const now = new Date();
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());

      console.log(`üìÖ NotificationService: L√™n l·ªãch th√¥ng b√°o cho ca ${shift.name} - 7 ng√†y t·ªõi`);

      // ‚úÖ B∆Ø·ªöC 2: L√™n l·ªãch th√¥ng b√°o th√¥ng minh cho 7 ng√†y t·ªõi
      for (let i = 0; i < 7; i++) {
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + i);
        const dayOfWeek = targetDate.getDay();
        const dateString = this.formatDateString(targetDate);

        // Ki·ªÉm tra ca c√≥ √°p d·ª•ng cho ng√†y n√†y kh√¥ng
        if (!shift.workDays.includes(dayOfWeek)) {
          continue;
        }

        // ‚úÖ L·∫•y attendance logs cho ng√†y c·ª• th·ªÉ n√†y
        const dayLogs = await storageService.getAttendanceLogsForDate(dateString);
        const hasGoWork = dayLogs.some(log => log.type === 'go_work');
        const hasCheckIn = dayLogs.some(log => log.type === 'check_in');
        const hasCheckOut = dayLogs.some(log => log.type === 'check_out');

        // ‚úÖ DEPARTURE REMINDER: Ch·ªâ l√™n l·ªãch n·∫øu ch∆∞a c√≥ go_work
        if (!hasGoWork) {
          const departureTime = this.parseTime(shift.departureTime);
          const departureDateTime = new Date(targetDate);
          departureDateTime.setHours(departureTime.hours, departureTime.minutes - 30, 0, 0);

          // X·ª≠ l√Ω ca ƒë√™m (departure time c√≥ th·ªÉ ·ªü ng√†y tr∆∞·ªõc)
          if (shift.isNightShift && departureTime.hours >= 20) {
            departureDateTime.setDate(departureDateTime.getDate() - 1);
          }

          if (departureDateTime > now) {
            await Notifications.scheduleNotificationAsync({
              identifier: `departure_${shift.id}_${dateString}`,
              content: {
                title: 'üö∂‚Äç‚ôÇÔ∏è Chu·∫©n b·ªã ƒëi l√†m',
                body: `C√≤n 30 ph√∫t n·ªØa l√† gi·ªù kh·ªüi h√†nh (${shift.departureTime}) cho ca ${shift.name}`,
                categoryIdentifier: NOTIFICATION_CATEGORIES.SHIFT_REMINDER,
                data: {
                  type: 'departure',
                  shiftId: shift.id,
                  shiftName: shift.name,
                  date: dateString,
                },
              },
              trigger: {
                date: departureDateTime,
              },
            });
            console.log(`üìÖ L√™n l·ªãch departure reminder: ${dateString} ${departureDateTime.toLocaleTimeString()}`);
          }
        }

        // ‚úÖ CHECK-IN REMINDER: Ch·ªâ l√™n l·ªãch n·∫øu ch∆∞a c√≥ check_in
        if (!hasCheckIn) {
          const startTime = this.parseTime(shift.startTime);
          const startDateTime = new Date(targetDate);
          startDateTime.setHours(startTime.hours, startTime.minutes, 0, 0);

          // X·ª≠ l√Ω ca ƒë√™m
          if (shift.isNightShift && startTime.hours < 12) {
            startDateTime.setDate(startDateTime.getDate() + 1);
          }

          if (startDateTime > now) {
            await Notifications.scheduleNotificationAsync({
              identifier: `checkin_${shift.id}_${dateString}`,
              content: {
                title: 'üì• Gi·ªù ch·∫•m c√¥ng v√†o',
                body: `ƒê√£ ƒë·∫øn gi·ªù ch·∫•m c√¥ng v√†o cho ca ${shift.name}`,
                categoryIdentifier: NOTIFICATION_CATEGORIES.SHIFT_REMINDER,
                data: {
                  type: 'checkin',
                  shiftId: shift.id,
                  shiftName: shift.name,
                  date: dateString,
                },
              },
              trigger: {
                date: startDateTime,
              },
            });
            console.log(`üìÖ L√™n l·ªãch check-in reminder: ${dateString} ${startDateTime.toLocaleTimeString()}`);
          }
        }

        // ‚úÖ CHECK-OUT REMINDER: Ch·ªâ l√™n l·ªãch n·∫øu ch∆∞a c√≥ check_out
        if (!hasCheckOut) {
          const endTime = this.parseTime(shift.officeEndTime);
          const endDateTime = new Date(targetDate);
          endDateTime.setHours(endTime.hours, endTime.minutes, 0, 0);

          // X·ª≠ l√Ω ca ƒë√™m
          if (shift.isNightShift && endTime.hours < 12) {
            endDateTime.setDate(endDateTime.getDate() + 1);
          }

          if (endDateTime > now) {
            await Notifications.scheduleNotificationAsync({
              identifier: `checkout_${shift.id}_${dateString}`,
              content: {
                title: 'üì§ Gi·ªù ch·∫•m c√¥ng ra',
                body: `ƒê√£ ƒë·∫øn gi·ªù ch·∫•m c√¥ng ra cho ca ${shift.name}`,
                categoryIdentifier: NOTIFICATION_CATEGORIES.SHIFT_REMINDER,
                data: {
                  type: 'checkout',
                  shiftId: shift.id,
                  shiftName: shift.name,
                  date: dateString,
                },
              },
              trigger: {
                date: endDateTime,
              },
            });
            console.log(`üìÖ L√™n l·ªãch check-out reminder: ${dateString} ${endDateTime.toLocaleTimeString()}`);
          }
        }
      }

      console.log(`‚úÖ NotificationService: Ho√†n th√†nh l√™n l·ªãch th√¥ng b√°o cho ca ${shift.name}`);
    } catch (error) {
      console.error('‚ùå NotificationService: L·ªói l√™n l·ªãch shift reminders:', error);
      throw error;
    }
  }

  async cancelShiftReminders(): Promise<void> {
    // ‚úÖ S·ª≠ d·ª•ng h√†m m·ªõi ƒë·ªÉ h·ªßy t·∫•t c·∫£ shift reminders
    await this.cancelAllShiftReminders();
  }

  // H·ªßy notification c·ª• th·ªÉ theo lo·∫°i v√† shift ID
  async cancelSpecificReminder(type: 'departure' | 'checkin' | 'checkout', shiftId: string): Promise<void> {
    try {
      if (!this.canScheduleNotifications()) return;

      const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
      const specificNotifications = scheduledNotifications.filter(
        notification => notification.identifier.startsWith(`${type}_${shiftId}_`)
      );

      for (const notification of specificNotifications) {
        await Notifications.cancelScheduledNotificationAsync(notification.identifier);
        console.log(`üîï ƒê√£ h·ªßy nh·∫Øc nh·ªü ${type} cho ca ${shiftId}`);
      }
    } catch (error) {
      console.error(`Error canceling ${type} reminders:`, error);
    }
  }

  async scheduleNoteReminder(note: Note): Promise<void> {
    try {
      await this.initialize();

      if (!this.canScheduleNotifications()) {
        console.log('üì± Workly: Notifications kh√¥ng kh·∫£ d·ª•ng, b·ªè qua l·∫≠p l·ªãch nh·∫Øc nh·ªü ghi ch√∫');
        // Hi·ªÉn th·ªã th√¥ng b√°o fallback cho ng∆∞·ªùi d√πng
        if (this.status?.isExpoGo) {
          this.showFallbackAlert(
            'Nh·∫Øc nh·ªü ghi ch√∫',
            'T√≠nh nƒÉng nh·∫Øc nh·ªü ghi ch√∫ s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t khi b·∫°n s·ª≠ d·ª•ng development build.'
          );
        }
        return;
      }

      // Cancel existing reminders for this note
      await this.cancelNoteReminder(note.id);

      // Handle specific datetime reminders
      if (note.reminderDateTime) {
        const reminderTime = new Date(note.reminderDateTime);
        const now = new Date();

        if (reminderTime <= now) return;

        await Notifications.scheduleNotificationAsync({
          identifier: `note_${note.id}`,
          content: {
            title: `üìù ${note.title}`,
            body: note.content.length > 100 ? note.content.substring(0, 100) + '...' : note.content,
            categoryIdentifier: NOTIFICATION_CATEGORIES.NOTE_REMINDER,
            data: {
              type: 'note',
              noteId: note.id,
              noteTitle: note.title,
            },
          },
          trigger: {
            date: reminderTime,
          },
        });
        return;
      }

      // Handle shift-based reminders
      if (note.associatedShiftIds && note.associatedShiftIds.length > 0) {
        await this.scheduleShiftBasedNoteReminders(note);
      }
    } catch (error) {
      console.error('Error scheduling note reminder:', error);
      throw error;
    }
  }

  /**
   * L·∫≠p l·ªãch nh·∫Øc nh·ªü cho note d·ª±a tr√™n shift (5 ph√∫t tr∆∞·ªõc departure time)
   */
  private async scheduleShiftBasedNoteReminders(note: Note): Promise<void> {
    if (!note.associatedShiftIds || note.associatedShiftIds.length === 0) return;

    const { timeSyncService } = await import('./timeSync');
    const shifts = await storageService.getShiftList();

    for (const shiftId of note.associatedShiftIds) {
      const shift = shifts.find(s => s.id === shiftId);
      if (!shift) continue;

      // T√≠nh to√°n th·ªùi gian nh·∫Øc nh·ªü cho 7 ng√†y t·ªõi
      const reminderTimes = timeSyncService.calculateShiftBasedReminderTimes(shift);

      // L·∫≠p l·ªãch cho t·ª´ng th·ªùi gian
      for (let i = 0; i < reminderTimes.length; i++) {
        const reminderTime = reminderTimes[i];

        await Notifications.scheduleNotificationAsync({
          identifier: `note_shift_${note.id}_${shiftId}_${i}`,
          content: {
            title: `üìù ${note.title}`,
            body: `${note.content.length > 80 ? note.content.substring(0, 80) + '...' : note.content} (Ca: ${shift.name})`,
            categoryIdentifier: NOTIFICATION_CATEGORIES.NOTE_REMINDER,
            data: {
              type: 'note_shift',
              noteId: note.id,
              noteTitle: note.title,
              shiftId: shift.id,
              shiftName: shift.name,
            },
          },
          trigger: {
            date: reminderTime,
          },
        });
      }
    }
  }

  async cancelNoteReminder(noteId: string): Promise<void> {
    try {
      if (!this.canScheduleNotifications()) return;

      // Cancel specific datetime reminder
      await Notifications.cancelScheduledNotificationAsync(`note_${noteId}`);

      // Cancel all shift-based reminders for this note
      const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
      const noteShiftReminders = scheduledNotifications.filter(
        notification => notification.identifier.startsWith(`note_shift_${noteId}_`)
      );

      for (const notification of noteShiftReminders) {
        await Notifications.cancelScheduledNotificationAsync(notification.identifier);
      }
    } catch (error) {
      console.error('Error canceling note reminder:', error);
    }
  }

  async scheduleWeatherWarning(message: string, location: string): Promise<void> {
    try {
      await this.initialize();

      if (!this.canScheduleNotifications()) {
        console.log('üì± Workly: Notifications kh√¥ng kh·∫£ d·ª•ng, b·ªè qua c·∫£nh b√°o th·ªùi ti·∫øt');
        return;
      }

      await Notifications.scheduleNotificationAsync({
        identifier: `weather_${Date.now()}`,
        content: {
          title: 'üå§Ô∏è C·∫£nh b√°o th·ªùi ti·∫øt',
          body: message,
          categoryIdentifier: NOTIFICATION_CATEGORIES.WEATHER_WARNING,
          data: {
            type: 'weather',
            location,
          },
        },
        trigger: null, // Show immediately
      });
    } catch (error) {
      console.error('Error scheduling weather warning:', error);
    }
  }

  async scheduleShiftRotationNotification(oldShiftName: string, newShiftName: string): Promise<void> {
    try {
      await this.initialize();

      if (!this.canScheduleNotifications()) {
        console.log('üì± Workly: Notifications kh√¥ng kh·∫£ d·ª•ng, b·ªè qua th√¥ng b√°o xoay ca');
        return;
      }

      await Notifications.scheduleNotificationAsync({
        identifier: `rotation_${Date.now()}`,
        content: {
          title: 'üîÑ Ca l√†m vi·ªác ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi',
          body: `Ca l√†m vi·ªác ƒë√£ chuy·ªÉn t·ª´ "${oldShiftName}" sang "${newShiftName}"`,
          categoryIdentifier: NOTIFICATION_CATEGORIES.SHIFT_ROTATION,
          data: {
            type: 'rotation',
            oldShift: oldShiftName,
            newShift: newShiftName,
          },
        },
        trigger: null, // Show immediately
      });
    } catch (error) {
      console.error('Error scheduling shift rotation notification:', error);
    }
  }

  async scheduleWeeklyShiftReminder(reminderDate: Date): Promise<void> {
    try {
      await this.initialize();

      const now = new Date();
      const timeDiff = reminderDate.getTime() - now.getTime();
      const daysDiff = timeDiff / (1000 * 60 * 60 * 24);

      console.log(`üìÖ NotificationService: Scheduling weekly reminder for ${reminderDate.toISOString()}`);
      console.log(`üìÖ NotificationService: Current time: ${now.toISOString()}`);
      console.log(`üìÖ NotificationService: Time difference: ${daysDiff.toFixed(2)} days`);
      console.log(`üìÖ NotificationService: Can schedule notifications: ${this.canScheduleNotifications()}`);
      console.log(`üìÖ NotificationService: Is Expo Go: ${this.status?.isExpoGo}`);

      // Ki·ªÉm tra th·ªùi gian h·ª£p l√Ω - kh√¥ng l·∫≠p l·ªãch n·∫øu qu√° g·∫ßn ho·∫∑c qu√° xa
      if (daysDiff < 0.1 || daysDiff > 7) {
        console.log(`üìÖ NotificationService: Invalid reminder time (${daysDiff.toFixed(2)} days), skipping`);
        return;
      }

      if (!this.canScheduleNotifications()) {
        console.log('üì± Workly: Notifications kh√¥ng kh·∫£ d·ª•ng, b·ªè qua nh·∫Øc nh·ªü h√†ng tu·∫ßn');
        // Trong Expo Go, KH√îNG BAO GI·ªú hi·ªÉn th·ªã fallback alert cho weekly reminder
        // v√¨ n√≥ ch·ªâ n√™n hi·ªÉn th·ªã ƒë√∫ng th·ªùi ƒëi·ªÉm (Saturday 10 PM) th√¥ng qua scheduled notification
        // ho·∫∑c alarm service, kh√¥ng ph·∫£i khi l·∫≠p l·ªãch
        if (this.status?.isExpoGo) {
          console.log('üì± NotificationService: Expo Go detected - weekly reminder fallback alert disabled to prevent inappropriate timing');
        }
        return;
      }

      // ‚úÖ LU√îN LU√îN cancel existing weekly reminders tr∆∞·ªõc ƒë·ªÉ tr√°nh tr√πng l·∫∑p
      await this.cancelWeeklyReminders();
      console.log('üìÖ NotificationService: Cancelled all existing weekly reminders');

      // ‚úÖ Ki·ªÉm tra l·∫°i sau khi cancel ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≤n reminder n√†o
      const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
      const remainingWeeklyReminders = scheduledNotifications.filter(
        notification => notification.identifier.startsWith('weekly_reminder_')
      );

      if (remainingWeeklyReminders.length > 0) {
        console.log(`‚ö†Ô∏è NotificationService: Still found ${remainingWeeklyReminders.length} weekly reminders after cancellation, force cancelling`);
        for (const notification of remainingWeeklyReminders) {
          await Notifications.cancelScheduledNotificationAsync(notification.identifier);
        }
      }

      const identifier = `weekly_reminder_${Date.now()}`;
      console.log(`üìÖ NotificationService: Creating notification with identifier: ${identifier}`);

      await Notifications.scheduleNotificationAsync({
        identifier,
        content: {
          title: 'üìÖ K·∫øt th√∫c tu·∫ßn l√†m vi·ªác',
          body: 'Tu·∫ßn l√†m vi·ªác ƒë√£ k·∫øt th√∫c. B·∫°n c√≥ mu·ªën xem l·∫°i v√† chu·∫©n b·ªã ca l√†m vi·ªác cho tu·∫ßn t·ªõi kh√¥ng?',
          categoryIdentifier: NOTIFICATION_CATEGORIES.SHIFT_REMINDER,
          data: {
            type: 'weekly_reminder',
            action: 'check_shifts',
          },
        },
        trigger: {
          date: reminderDate,
        },
      });

      console.log(`‚úÖ NotificationService: Weekly reminder scheduled successfully`);
    } catch (error) {
      console.error('‚ùå NotificationService: Error scheduling weekly shift reminder:', error);
    }
  }

  async cancelWeeklyReminders(): Promise<void> {
    try {
      if (!this.canScheduleNotifications()) return;

      const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
      const weeklyReminders = scheduledNotifications.filter(
        notification => notification.identifier.startsWith('weekly_reminder_')
      );

      for (const notification of weeklyReminders) {
        await Notifications.cancelScheduledNotificationAsync(notification.identifier);
      }
    } catch (error) {
      console.error('Error canceling weekly reminders:', error);
    }
  }

  async showAlarmNotification(alarmData: AlarmData): Promise<void> {
    try {
      await this.initialize();

      if (!this.canScheduleNotifications()) {
        console.log('üì± Workly: Notifications kh√¥ng kh·∫£ d·ª•ng, b·ªè qua alarm notification');
        return;
      }

      await Notifications.scheduleNotificationAsync({
        identifier: `alarm_${alarmData.id}`,
        content: {
          title: alarmData.title,
          body: alarmData.message,
          categoryIdentifier: alarmData.type === 'shift_reminder'
            ? NOTIFICATION_CATEGORIES.SHIFT_REMINDER
            : NOTIFICATION_CATEGORIES.NOTE_REMINDER,
          data: {
            type: 'alarm',
            alarmId: alarmData.id,
            relatedId: alarmData.relatedId,
          },
        },
        trigger: null, // Show immediately
      });
    } catch (error) {
      console.error('Error showing alarm notification:', error);
    }
  }

  private parseTime(timeString: string): { hours: number; minutes: number } {
    const [hours, minutes] = timeString.split(':').map(Number);
    return { hours, minutes };
  }

  /**
   * ‚úÖ Format date string ƒë·ªÉ t·∫°o ID duy nh·∫•t cho th√¥ng b√°o
   */
  private formatDateString(date: Date): string {
    return date.toISOString().split('T')[0]; // YYYY-MM-DD
  }

  /**
   * ‚úÖ H·ªßy t·∫•t c·∫£ th√¥ng b√°o shift reminders (bao g·ªìm c·∫£ nh·ªØng th√¥ng b√°o c≈©)
   */
  async cancelAllShiftReminders(): Promise<void> {
    try {
      if (!this.canScheduleNotifications()) return;

      console.log('üßπ NotificationService: B·∫Øt ƒë·∫ßu h·ªßy t·∫•t c·∫£ shift reminders...');

      const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
      const shiftNotifications = scheduledNotifications.filter(
        notification =>
          notification.identifier.startsWith('departure_') ||
          notification.identifier.startsWith('checkin_') ||
          notification.identifier.startsWith('checkout_')
      );

      console.log(`üßπ NotificationService: T√¨m th·∫•y ${shiftNotifications.length} shift notifications c·∫ßn h·ªßy`);

      for (const notification of shiftNotifications) {
        await Notifications.cancelScheduledNotificationAsync(notification.identifier);
        console.log(`üîï ƒê√£ h·ªßy: ${notification.identifier}`);
      }

      console.log('‚úÖ NotificationService: Ho√†n th√†nh h·ªßy t·∫•t c·∫£ shift reminders');
    } catch (error) {
      console.error('‚ùå NotificationService: L·ªói h·ªßy shift reminders:', error);
    }
  }

  /**
   * ‚úÖ H·ªßy th√¥ng b√°o c·ª• th·ªÉ khi ng∆∞·ªùi d√πng th·ª±c hi·ªán h√†nh ƒë·ªông
   */
  async cancelReminderAfterAction(action: 'go_work' | 'check_in' | 'check_out', shiftId: string, date: string): Promise<void> {
    try {
      if (!this.canScheduleNotifications()) return;

      // Map action to notification identifier prefix
      let notificationType: string;
      switch (action) {
        case 'go_work':
          notificationType = 'departure'; // departure_[shiftId]_[date]
          break;
        case 'check_in':
          notificationType = 'checkin'; // checkin_[shiftId]_[date]
          break;
        case 'check_out':
          notificationType = 'checkout'; // checkout_[shiftId]_[date]
          break;
        default:
          return;
      }

      const identifier = `${notificationType}_${shiftId}_${date}`;

      try {
        await Notifications.cancelScheduledNotificationAsync(identifier);
        console.log(`üîï ƒê√£ h·ªßy th√¥ng b√°o ${notificationType} sau khi th·ª±c hi·ªán ${action}: ${identifier}`);
      } catch (cancelError) {
        // Kh√¥ng log error n·∫øu notification kh√¥ng t·ªìn t·∫°i (ƒë√£ b·ªã h·ªßy ho·∫∑c ch∆∞a ƒë∆∞·ª£c l√™n l·ªãch)
        console.log(`‚ÑπÔ∏è Th√¥ng b√°o ${identifier} kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã h·ªßy`);
      }
    } catch (error) {
      console.error(`‚ùå NotificationService: L·ªói h·ªßy th√¥ng b√°o sau ${action}:`, error);
    }
  }

  async getAllScheduledNotifications(): Promise<any[]> {
    try {
      if (!this.canScheduleNotifications()) return [];
      return await Notifications.getAllScheduledNotificationsAsync();
    } catch (error) {
      console.error('Error getting scheduled notifications:', error);
      return [];
    }
  }



  async cancelAllNotifications(): Promise<void> {
    try {
      if (!this.canScheduleNotifications()) return;
      await Notifications.cancelAllScheduledNotificationsAsync();
    } catch (error) {
      console.error('Error canceling all notifications:', error);
    }
  }

  // Add notification response listener v·ªõi safe check
  addNotificationResponseListener(listener: (response: any) => void): any {
    if (!isNotificationsAvailable()) {
      console.warn('‚ö†Ô∏è Workly: Kh√¥ng th·ªÉ th√™m notification response listener - notifications kh√¥ng kh·∫£ d·ª•ng');
      return { remove: () => {} }; // Return dummy subscription
    }

    try {
      return Notifications.addNotificationResponseReceivedListener(listener);
    } catch (error) {
      console.error('Error adding notification response listener:', error);
      return { remove: () => {} };
    }
  }

  // Add notification received listener v·ªõi safe check
  addNotificationReceivedListener(listener: (notification: any) => void): any {
    if (!isNotificationsAvailable()) {
      console.warn('‚ö†Ô∏è Workly: Kh√¥ng th·ªÉ th√™m notification received listener - notifications kh√¥ng kh·∫£ d·ª•ng');
      return { remove: () => {} }; // Return dummy subscription
    }

    try {
      return Notifications.addNotificationReceivedListener(listener);
    } catch (error) {
      console.error('Error adding notification received listener:', error);
      return { remove: () => {} };
    }
  }

  // Check if notifications are fully supported - C·∫≠p nh·∫≠t ƒë·ªÉ s·ª≠ d·ª•ng status ƒë√£ c√≥
  async checkNotificationSupport(): Promise<NotificationStatus> {
    await this.initialize();

    return this.status || {
      isSupported: false,
      isExpoGo: isRunningInExpoGo(),
      hasPermission: false,
      platform: Platform.OS,
      message: 'Ch∆∞a kh·ªüi t·∫°o notification service',
      canSchedule: false
    };
  }


}

export const notificationService = new NotificationService();
