import { Note } from '../types';

// Sample notes data for testing - ƒêa ng√¥n ng·ªØ
export const SAMPLE_NOTES = {
  vi: [
    {
      id: 'note_001',
      title: 'H·ªçp team h√†ng tu·∫ßn',
      content: 'Chu·∫©n b·ªã b√°o c√°o ti·∫øn ƒë·ªô d·ª± √°n v√† th·∫£o lu·∫≠n v·ªÅ c√°c v·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt trong tu·∫ßn t·ªõi. Nh·ªõ mang theo laptop v√† t√†i li·ªáu.',
      isPriority: true,
      reminderDateTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(), // 2 hours from now
      createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago
      updatedAt: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), // 1 hour ago
    },
    {
      id: 'note_002',
      title: 'Ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥',
      content: 'ƒê·∫∑t l·ªãch kh√°m s·ª©c kh·ªèe t·ªïng qu√°t t·∫°i b·ªánh vi·ªán. C·∫ßn mang theo BHYT v√† c√°c x√©t nghi·ªám c≈©.',
      isPriority: true,
      reminderDateTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // tomorrow
      createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days ago
      updatedAt: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(), // 3 hours ago
    },
    {
      id: 'note_003',
      title: 'Mua qu√† sinh nh·∫≠t',
      content: 'T√¨m m√≥n qu√† ph√π h·ª£p cho sinh nh·∫≠t b·∫°n th√¢n. C√≥ th·ªÉ l√† s√°ch, ƒë·ªìng h·ªì ho·∫∑c voucher du l·ªãch.',
      isPriority: false,
      reminderDateTime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 days from now
      createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // 1 day ago
      updatedAt: new Date(Date.now() - 30 * 60 * 1000).toISOString(), // 30 minutes ago
    },
  {
    id: 'note_004',
    title: 'N·ªôp b√°o c√°o th√°ng',
    content: 'Ho√†n th√†nh v√† n·ªôp b√°o c√°o c√¥ng vi·ªác th√°ng n√†y cho ph√≤ng nh√¢n s·ª±. Deadline l√† cu·ªëi tu·∫ßn.',
    isPriority: true,
    associatedShiftIds: ['shift_morning'], // Linked to morning shift
    createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 days ago
    updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago
  },
  {
    id: 'note_005',
    title: 'H·ªçc ti·∫øng Anh',
    content: '√în t·∫≠p t·ª´ v·ª±ng v√† ng·ªØ ph√°p cho k·ª≥ thi TOEIC. M·ª•c ti√™u ƒë·∫°t 750+ ƒëi·ªÉm.',
    isPriority: false,
    associatedShiftIds: ['shift_afternoon'], // Linked to afternoon shift
    createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 1 week ago
    updatedAt: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), // 4 hours ago
  },
  {
    id: 'note_006',
    title: 'Thanh to√°n h√≥a ƒë∆°n ƒëi·ªán',
    content: 'Nh·ªõ thanh to√°n h√≥a ƒë∆°n ti·ªÅn ƒëi·ªán tr∆∞·ªõc ng√†y 15 ƒë·ªÉ tr√°nh b·ªã c·∫Øt ƒëi·ªán.',
    isPriority: false,
    reminderDateTime: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days from now
    createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(), // 10 days ago
    updatedAt: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), // 6 hours ago
  },
  {
    id: 'note_007',
    title: 'Backup d·ªØ li·ªáu m√°y t√≠nh',
    content: 'Sao l∆∞u to√†n b·ªô d·ªØ li·ªáu quan tr·ªçng l√™n cloud v√† ·ªï c·ª©ng ngo√†i. Bao g·ªìm ·∫£nh, video, t√†i li·ªáu c√¥ng vi·ªác.',
    isPriority: false,
    associatedShiftIds: ['shift_night'], // Linked to night shift
    createdAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(), // 4 days ago
    updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // 1 day ago
  },
  {
    id: 'note_008',
    title: 'ƒê·∫∑t v√© m√°y bay',
    content: 'T√¨m v√† ƒë·∫∑t v√© m√°y bay cho chuy·∫øn du l·ªãch ƒê√† N·∫µng cu·ªëi th√°ng. So s√°nh gi√° t·ª´ nhi·ªÅu h√£ng.',
    isPriority: true,
    reminderDateTime: new Date(Date.now() + 6 * 60 * 60 * 1000).toISOString(), // 6 hours from now
    createdAt: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000).toISOString(), // 6 days ago
    updatedAt: new Date(Date.now() - 45 * 60 * 1000).toISOString(), // 45 minutes ago
  },
  {
    id: 'note_009',
    title: 'G·ªçi ƒëi·ªán cho b·ªë m·∫π',
    content: 'G·ªçi ƒëi·ªán h·ªèi thƒÉm s·ª©c kh·ªèe b·ªë m·∫π v√† chia s·∫ª v·ªÅ c√¥ng vi·ªác g·∫ßn ƒë√¢y.',
    isPriority: false,
    reminderDateTime: new Date(Date.now() + 12 * 60 * 60 * 1000).toISOString(), // 12 hours from now
    createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // 1 day ago
    updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago
  },
  {
    id: 'note_010',
    title: 'C·∫≠p nh·∫≠t CV',
    content: 'B·ªï sung kinh nghi·ªám v√† k·ªπ nƒÉng m·ªõi v√†o CV. Chu·∫©n b·ªã cho c∆° h·ªôi vi·ªác l√†m t·ªët h∆°n.',
    isPriority: false,
    createdAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000).toISOString(), // 8 days ago
    updatedAt: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(), // 5 hours ago
  },
  {
    id: 'note_011',
    title: 'T·∫≠p th·ªÉ d·ª•c',
    content: 'Duy tr√¨ th√≥i quen t·∫≠p gym 3 l·∫ßn/tu·∫ßn. T·∫≠p trung v√†o cardio v√† strength training.',
    isPriority: false,
    associatedShiftIds: ['shift_morning', 'shift_afternoon'], // Multiple shifts
    createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(), // 2 weeks ago
    updatedAt: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), // 1 hour ago
  },
  {
    id: 'note_012',
    title: 'ƒê·ªçc s√°ch m·ªõi',
    content: 'Ho√†n th√†nh cu·ªën "Atomic Habits" v√† ghi ch√∫ nh·ªØng ƒëi·ªÉm quan tr·ªçng ƒë·ªÉ √°p d·ª•ng.',
    isPriority: false,
    reminderDateTime: new Date(Date.now() + 18 * 60 * 60 * 1000).toISOString(), // 18 hours from now
    createdAt: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000).toISOString(), // 12 days ago
    updatedAt: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(), // 8 hours ago
  }
  ],
  en: [
    {
      id: 'note_001',
      title: 'Weekly team meeting',
      content: 'Prepare project progress report and discuss issues that need to be resolved next week. Remember to bring laptop and documents.',
      isPriority: true,
      reminderDateTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(), // 2 hours from now
      createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago
      updatedAt: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), // 1 hour ago
    },
    {
      id: 'note_002',
      title: 'Regular health checkup',
      content: 'Schedule a comprehensive health examination at the hospital. Need to bring health insurance and old test results.',
      isPriority: true,
      reminderDateTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // tomorrow
      createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days ago
      updatedAt: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(), // 3 hours ago
    },
    {
      id: 'note_003',
      title: 'Buy birthday gift',
      content: 'Find a suitable gift for best friend\'s birthday. Could be books, watch, or travel voucher.',
      isPriority: false,
      reminderDateTime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 days from now
      createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // 1 day ago
      updatedAt: new Date(Date.now() - 30 * 60 * 1000).toISOString(), // 30 minutes ago
    },
    {
      id: 'note_004',
      title: 'Submit monthly report',
      content: 'Complete and submit this month\'s work report to HR department. Deadline is end of week.',
      isPriority: true,
      associatedShiftIds: ['shift_morning'], // Linked to morning shift
      createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 days ago
      updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago
    },
    {
      id: 'note_005',
      title: 'Learn English',
      content: 'Review vocabulary and grammar for TOEIC exam. Target score 750+.',
      isPriority: false,
      associatedShiftIds: ['shift_afternoon'], // Linked to afternoon shift
      createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 1 week ago
      updatedAt: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), // 4 hours ago
    },
  ]
} as const;

// Function to generate sample notes with current timestamps - H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ
export const generateSampleNotes = (language: string = 'vi'): Note[] => {
  const now = new Date();
  const notesData = SAMPLE_NOTES[language as keyof typeof SAMPLE_NOTES] || SAMPLE_NOTES.vi;

  return notesData.map(note => ({
    ...note,
    // Update reminder times to be relative to current time
    reminderDateTime: note.reminderDateTime ?
      new Date(now.getTime() + (new Date(note.reminderDateTime).getTime() - new Date(note.createdAt).getTime())).toISOString() :
      undefined,
    // Update created/updated times to be relative to current time
    createdAt: new Date(now.getTime() - (now.getTime() - new Date(note.createdAt).getTime())).toISOString(),
    updatedAt: new Date(now.getTime() - (now.getTime() - new Date(note.updatedAt).getTime())).toISOString(),
  }));
};

// Function to add sample notes to storage - H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ
export const addSampleNotesToStorage = async (language: string = 'vi') => {
  const { storageService } = await import('./storage');

  try {
    const existingNotes = await storageService.getNotes();

    // Only add sample notes if there are no existing notes
    if (existingNotes.length === 0) {
      const sampleNotes = generateSampleNotes(language);
      await storageService.setNotes(sampleNotes);
      console.log(`‚úÖ Added sample notes to storage (${language})`);
      return sampleNotes;
    } else {
      console.log('üìù Notes already exist, skipping sample data');
      return existingNotes;
    }
  } catch (error) {
    console.error('‚ùå Error adding sample notes:', error);
    return [];
  }
};

// Function to force reset with sample data (for testing)
export const resetWithSampleNotes = async () => {
  const { storageService } = await import('./storage');

  try {
    const sampleNotes = generateSampleNotes();
    await storageService.setNotes(sampleNotes);
    console.log('üîÑ Reset with fresh sample notes');
    return sampleNotes;
  } catch (error) {
    console.error('‚ùå Error resetting sample notes:', error);
    return [];
  }
};

// Function to clear all notes
export const clearAllNotes = async () => {
  const { storageService } = await import('./storage');

  try {
    await storageService.setNotes([]);
    console.log('üóëÔ∏è Cleared all notes');
    return [];
  } catch (error) {
    console.error('‚ùå Error clearing notes:', error);
    return [];
  }
};
