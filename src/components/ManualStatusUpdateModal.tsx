import React, { useState } from 'react';
import { View, StyleSheet, ScrollView, Alert } from 'react-native';
import { Modal, Text, Button, useTheme, Divider, IconButton, List } from 'react-native-paper';
import { format, parseISO, isFuture, isToday, isPast } from 'date-fns';
import { vi } from 'date-fns/locale';
import { DailyWorkStatus, Shift } from '../types';
import { WEEKLY_STATUS, DAYS_OF_WEEK } from '../constants';
import { TimeEditModal } from './TimeEditModal';

interface ManualStatusUpdateModalProps {
  visible: boolean;
  onDismiss: () => void;
  date: string;
  currentStatus: DailyWorkStatus | null;
  shift: Shift | null;
  onStatusUpdate: (status: DailyWorkStatus['status']) => Promise<void>;
  onTimeEdit: (checkInTime: string, checkOutTime: string) => Promise<void>;
  onRecalculateFromLogs: () => Promise<void>;
  onClearManualStatus: () => Promise<void>;
}

export function ManualStatusUpdateModal({
  visible,
  onDismiss,
  date,
  currentStatus,
  shift,
  onStatusUpdate,
  onTimeEdit,
  onRecalculateFromLogs,
  onClearManualStatus,
}: ManualStatusUpdateModalProps) {
  const theme = useTheme();
  const [timeEditVisible, setTimeEditVisible] = useState(false);

  // Debug logs ƒë·ªÉ ki·ªÉm tra
  console.log('üîç ManualStatusUpdateModal props:', { visible, date, hasCurrentStatus: !!currentStatus, hasShift: !!shift });

  if (!visible) {
    console.log('‚ùå Modal not visible');
    return null;
  }

  if (!date) {
    console.log('‚ùå No date provided');
    return null;
  }

  let dateObj: Date;
  try {
    dateObj = parseISO(date);
    if (isNaN(dateObj.getTime())) {
      console.log('‚ùå Invalid date:', date);
      return null;
    }
  } catch (error) {
    console.log('‚ùå Error parsing date:', date, error);
    return null;
  }

  const dayOfWeek = DAYS_OF_WEEK.vi[dateObj.getDay()];
  const formattedDate = format(dateObj, 'dd/MM/yyyy', { locale: vi });

  console.log('‚úÖ Modal rendering for:', formattedDate);

  const isDateFuture = isFuture(dateObj) && !isToday(dateObj);
  const isDatePastOrToday = isPast(dateObj) || isToday(dateObj);
  const hasManualStatus = currentStatus?.isManualOverride;

  // C√°c tr·∫°ng th√°i ngh·ªâ c√≥ th·ªÉ ch·ªçn
  const leaveStatuses: Array<{
    status: DailyWorkStatus['status'];
    title: string;
    icon: string;
    description: string;
  }> = [
    {
      status: 'NGHI_PHEP',
      title: 'Ngh·ªâ Ph√©p',
      icon: 'beach',
      description: 'Ngh·ªâ ph√©p c√≥ k·∫ø ho·∫°ch',
    },
    {
      status: 'NGHI_BENH',
      title: 'Ngh·ªâ B·ªánh',
      icon: 'hospital-box',
      description: 'Ngh·ªâ ·ªëm, kh√°m b·ªánh',
    },
    {
      status: 'NGHI_LE',
      title: 'Ngh·ªâ L·ªÖ',
      icon: 'flag',
      description: 'Ngh·ªâ l·ªÖ, t·∫øt',
    },
    {
      status: 'VANG_MAT',
      title: 'V·∫Øng M·∫∑t',
      icon: 'account-remove',
      description: 'V·∫Øng m·∫∑t kh√¥ng ph√©p',
    },
    {
      status: 'CONG_TAC',
      title: 'C√¥ng T√°c',
      icon: 'airplane',
      description: 'ƒêi c√¥ng t√°c',
    },
  ];

  const handleStatusSelect = async (status: DailyWorkStatus['status']) => {
    try {
      await onStatusUpdate(status);
      onDismiss();

      const statusInfo = WEEKLY_STATUS[status];
      Alert.alert(
        'Th√†nh c√¥ng',
        `ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ng√†y ${format(dateObj, 'dd/MM')} th√†nh "${statusInfo?.text}"`
      );
    } catch (error) {
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const handleRecalculate = async () => {
    try {
      await onRecalculateFromLogs();
      onDismiss();
      Alert.alert(
        'Th√†nh c√¥ng',
        `ƒê√£ t√≠nh l·∫°i tr·∫°ng th√°i cho ng√†y ${format(dateObj, 'dd/MM')} d·ª±a tr√™n ch·∫•m c√¥ng`
      );
    } catch (error) {
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t√≠nh l·∫°i tr·∫°ng th√°i. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const handleClearManual = async () => {
    Alert.alert(
      'X√°c nh·∫≠n',
      `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a tr·∫°ng th√°i th·ªß c√¥ng v√† t√≠nh l·∫°i cho ng√†y ${format(dateObj, 'dd/MM')}?`,
      [
        { text: 'H·ªßy', style: 'cancel' },
        {
          text: 'X√≥a',
          style: 'destructive',
          onPress: async () => {
            try {
              await onClearManualStatus();
              onDismiss();
              Alert.alert('Th√†nh c√¥ng', 'ƒê√£ x√≥a tr·∫°ng th√°i th·ªß c√¥ng v√† t√≠nh l·∫°i');
            } catch (error) {
              Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ x√≥a tr·∫°ng th√°i. Vui l√≤ng th·ª≠ l·∫°i.');
            }
          },
        },
      ]
    );
  };

  const handleTimeEditSave = async (checkInTime: string, checkOutTime: string) => {
    try {
      await onTimeEdit(checkInTime, checkOutTime);
      setTimeEditVisible(false);
      onDismiss();
      Alert.alert('Th√†nh c√¥ng', 'ƒê√£ c·∫≠p nh·∫≠t gi·ªù ch·∫•m c√¥ng');
    } catch (error) {
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t gi·ªù ch·∫•m c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  console.log('üéØ About to render Modal with visible:', visible);

  return (
    <>
      <Modal
        visible={visible}
        onDismiss={onDismiss}
        contentContainerStyle={[
          styles.container,
          { backgroundColor: theme.colors.surface }
        ]}
      >
        <ScrollView showsVerticalScrollIndicator={false}>
          {/* Header */}
          <View style={styles.header}>
            <View style={styles.headerContent}>
              <Text style={[styles.title, { color: theme.colors.onSurface }]}>
                C·∫≠p nh·∫≠t tr·∫°ng th√°i
              </Text>
              <IconButton
                icon="close"
                size={24}
                iconColor={theme.colors.onSurface}
                onPress={onDismiss}
              />
            </View>

            <Text style={[styles.dateText, { color: theme.colors.onSurfaceVariant }]}>
              {dayOfWeek}, {formattedDate}
            </Text>

            {shift ? (
              <Text style={[styles.shiftText, { color: theme.colors.primary }]}>
                Ca: {shift.name} ({shift.startTime} - {shift.endTime})
              </Text>
            ) : (
              <Text style={[styles.shiftText, { color: theme.colors.error }]}>
                Ch∆∞a c√≥ ca l√†m vi·ªác ƒë∆∞·ª£c k√≠ch ho·∫°t
              </Text>
            )}
          </View>

          <Divider style={{ marginVertical: 16 }} />

          {/* C√°c l·ª±a ch·ªçn cho ng√†y qu√° kh·ª©/hi·ªán t·∫°i */}
          {isDatePastOrToday && (
            <>
              <Text style={[styles.sectionTitle, { color: theme.colors.onSurface }]}>
                T√≠nh to√°n t·ª´ ch·∫•m c√¥ng
              </Text>

              <List.Item
                title="T√≠nh theo ch·∫•m c√¥ng"
                description="T·ª± ƒë·ªông t√≠nh d·ª±a tr√™n log check-in/check-out"
                left={(props) => <List.Icon {...props} icon="calculator" />}
                onPress={handleRecalculate}
                style={[styles.listItem, { backgroundColor: theme.colors.surfaceVariant }]}
              />

              <List.Item
                title="Ch·ªânh s·ª≠a gi·ªù ch·∫•m c√¥ng"
                description="Nh·∫≠p/s·ª≠a gi·ªù v√†o v√† gi·ªù ra th·ªß c√¥ng"
                left={(props) => <List.Icon {...props} icon="clock-edit" />}
                onPress={() => setTimeEditVisible(true)}
                style={[styles.listItem, { backgroundColor: theme.colors.surfaceVariant }]}
              />

              {hasManualStatus && (
                <List.Item
                  title="X√≥a tr·∫°ng th√°i th·ªß c√¥ng"
                  description="X√≥a tr·∫°ng th√°i ngh·ªâ v√† t√≠nh l·∫°i t·ª´ ch·∫•m c√¥ng"
                  left={(props) => <List.Icon {...props} icon="delete" />}
                  onPress={handleClearManual}
                  style={[styles.listItem, { backgroundColor: theme.colors.errorContainer }]}
                  titleStyle={{ color: theme.colors.onErrorContainer }}
                  descriptionStyle={{ color: theme.colors.onErrorContainer }}
                />
              )}

              <Divider style={{ marginVertical: 16 }} />
            </>
          )}

          {/* C√°c tr·∫°ng th√°i ngh·ªâ */}
          <Text style={[styles.sectionTitle, { color: theme.colors.onSurface }]}>
            Tr·∫°ng th√°i ngh·ªâ
          </Text>

          {leaveStatuses.map((item) => (
            <List.Item
              key={item.status}
              title={item.title}
              description={item.description}
              left={(props) => <List.Icon {...props} icon={item.icon} />}
              onPress={() => handleStatusSelect(item.status)}
              style={[styles.listItem, { backgroundColor: theme.colors.surfaceVariant }]}
            />
          ))}

          {/* N√∫t h·ªßy */}
          <Button
            mode="outlined"
            onPress={onDismiss}
            style={styles.cancelButton}
          >
            H·ªßy
          </Button>
        </ScrollView>
      </Modal>

      {/* Time Edit Modal */}
      <TimeEditModal
        visible={timeEditVisible}
        onDismiss={() => setTimeEditVisible(false)}
        currentCheckInTime={currentStatus?.vaoLogTime}
        currentCheckOutTime={currentStatus?.raLogTime}
        shift={shift}
        onSave={handleTimeEditSave}
      />
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    margin: 20,
    borderRadius: 12,
    maxHeight: '80%',
    padding: 20,
  },
  header: {
    marginBottom: 8,
  },
  headerContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  dateText: {
    fontSize: 16,
    marginTop: 4,
  },
  shiftText: {
    fontSize: 14,
    marginTop: 4,
    fontWeight: '500',
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
  },
  listItem: {
    borderRadius: 8,
    marginBottom: 8,
  },
  cancelButton: {
    marginTop: 16,
  },
});
