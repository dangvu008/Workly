import React, { useState } from 'react';
import { View, Text, TouchableOpacity, Alert, ScrollView, StyleSheet } from 'react-native';
import { alarmService } from '../services/alarmService';
import { reminderSyncService } from '../services/reminderSync';

interface AlarmDebugPanelProps {
  onClose: () => void;
}

export const AlarmDebugPanel: React.FC<AlarmDebugPanelProps> = ({ onClose }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [debugInfo, setDebugInfo] = useState<string>('');

  const handleForceCleanup = async () => {
    Alert.alert(
      'üßπ Force Cleanup Alarm',
      'B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ alarm c≈© v√† t·∫°o l·∫°i t·ª´ ƒë·∫ßu?\n\nƒêi·ªÅu n√†y s·∫Ω gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ th√¥ng b√°o kh√¥ng ƒë√∫ng th·ªùi gian.',
      [
        {
          text: 'H·ªßy',
          style: 'cancel'
        },
        {
          text: 'X√≥a v√† t·∫°o l·∫°i',
          style: 'destructive',
          onPress: async () => {
            setIsLoading(true);
            try {
              await alarmService.forceCleanupAndReset();
              Alert.alert(
                '‚úÖ Th√†nh c√¥ng',
                'ƒê√£ x√≥a t·∫•t c·∫£ alarm c≈© v√† t·∫°o l·∫°i. Th√¥ng b√°o gi·ªù s·∫Ω ch·ªâ xu·∫•t hi·ªán v√†o th·ªùi gian ph√π h·ª£p.',
                [{ text: 'OK', onPress: onClose }]
              );
            } catch (error) {
              console.error('Error force cleanup:', error);
              Alert.alert('‚ùå L·ªói', 'Kh√¥ng th·ªÉ th·ª±c hi·ªán force cleanup');
            } finally {
              setIsLoading(false);
            }
          }
        }
      ]
    );
  };

  const handleDebugAlarms = async () => {
    setIsLoading(true);
    try {
      // Capture console.log output
      const originalLog = console.log;
      let logOutput = '';
      
      console.log = (...args) => {
        logOutput += args.join(' ') + '\n';
        originalLog(...args);
      };

      await alarmService.debugListAllAlarms();
      
      // Restore console.log
      console.log = originalLog;
      
      setDebugInfo(logOutput);
    } catch (error) {
      console.error('Error debugging alarms:', error);
      setDebugInfo('L·ªói khi debug alarm: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSyncReminders = async () => {
    setIsLoading(true);
    try {
      await reminderSyncService.syncNextReminders();
      Alert.alert('‚úÖ Th√†nh c√¥ng', 'ƒê√£ ƒë·ªìng b·ªô l·∫°i reminder');
    } catch (error) {
      console.error('Error syncing reminders:', error);
      Alert.alert('‚ùå L·ªói', 'Kh√¥ng th·ªÉ ƒë·ªìng b·ªô reminder');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>üîß Alarm Debug Panel</Text>
        <TouchableOpacity onPress={onClose} style={styles.closeButton}>
          <Text style={styles.closeButtonText}>‚úï</Text>
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.content}>
        <Text style={styles.description}>
          Panel n√†y gi√∫p debug v√† s·ª≠a l·ªói th√¥ng b√°o kh√¥ng ƒë√∫ng th·ªùi gian.
        </Text>

        <View style={styles.buttonContainer}>
          <TouchableOpacity
            style={[styles.button, styles.dangerButton]}
            onPress={handleForceCleanup}
            disabled={isLoading}
          >
            <Text style={styles.buttonText}>
              üßπ Force Cleanup & Reset
            </Text>
            <Text style={styles.buttonSubtext}>
              X√≥a t·∫•t c·∫£ alarm c≈© v√† t·∫°o l·∫°i
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.button, styles.infoButton]}
            onPress={handleDebugAlarms}
            disabled={isLoading}
          >
            <Text style={styles.buttonText}>
              üîç Debug Alarm List
            </Text>
            <Text style={styles.buttonSubtext}>
              Xem danh s√°ch alarm hi·ªán t·∫°i
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.button, styles.primaryButton]}
            onPress={handleSyncReminders}
            disabled={isLoading}
          >
            <Text style={styles.buttonText}>
              üîÑ Sync Reminders
            </Text>
            <Text style={styles.buttonSubtext}>
              ƒê·ªìng b·ªô l·∫°i reminder
            </Text>
          </TouchableOpacity>
        </View>

        {debugInfo ? (
          <View style={styles.debugOutput}>
            <Text style={styles.debugTitle}>üìã Debug Output:</Text>
            <ScrollView style={styles.debugScroll}>
              <Text style={styles.debugText}>{debugInfo}</Text>
            </ScrollView>
          </View>
        ) : null}

        {isLoading && (
          <View style={styles.loadingContainer}>
            <Text style={styles.loadingText}>‚è≥ ƒêang x·ª≠ l√Ω...</Text>
          </View>
        )}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  closeButton: {
    padding: 8,
  },
  closeButtonText: {
    fontSize: 18,
    color: '#666',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  description: {
    fontSize: 14,
    color: '#666',
    marginBottom: 20,
    textAlign: 'center',
  },
  buttonContainer: {
    gap: 12,
  },
  button: {
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  dangerButton: {
    backgroundColor: '#ff4444',
  },
  infoButton: {
    backgroundColor: '#2196f3',
  },
  primaryButton: {
    backgroundColor: '#4caf50',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  buttonSubtext: {
    color: '#fff',
    fontSize: 12,
    opacity: 0.9,
  },
  debugOutput: {
    marginTop: 20,
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 16,
  },
  debugTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#333',
  },
  debugScroll: {
    maxHeight: 200,
  },
  debugText: {
    fontSize: 12,
    fontFamily: 'monospace',
    color: '#333',
    lineHeight: 16,
  },
  loadingContainer: {
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    fontSize: 16,
    color: '#666',
  },
});
